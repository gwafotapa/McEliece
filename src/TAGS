
polynomial/characteristic_two.rs,1125
type Result<T> = std::result::Result<T, Box<dyn Error>>;Result9,175
impl<'a, F: CharacteristicTwo + Eq + Field> Poly<'a, F> {Poly11,233
    pub fn random_monic_irreducible(rng: &mut ThreadRng, f: &'a F, degree: usize) -> Selfrandom_monic_irreducible12,291
    pub fn square(&mut self) {square29,734
    pub fn square_root_modulo(&mut self, modulus: &Self)square_root_modulo41,1059
    pub fn inverse_modulo_by_fast_exponentiation(&mut self, modulus: &Self)inverse_modulo_by_fast_exponentiation56,1474
    pub fn pow_modulo(&mut self, mut n: u32, modulus: &Self) {pow_modulo83,2384
    pub fn is_irreducible(&self) -> boolis_irreducible106,3011
    pub fn goppa_extended_gcd(g: &Self, t: &Self) -> (Self, Self) {goppa_extended_gcd154,4381
impl<'a, F: Eq + F2FiniteExtension> Poly<'a, F> {Poly182,5116
    pub fn to_hex_string(&self) -> String {to_hex_string183,5166
    pub fn from_hex_string(s: &str, f: &'a F) -> Result<Self> {from_hex_string201,5917
pub fn trial_division(mut n: u32) -> Vec<u32> {trial_division222,6709
mod tests {tests248,7217
    fn is_irreducible() {is_irreducible255,7366

polynomial/mod.rs,4690
pub struct Poly<'a, F: Eq + Field> {Poly13,278
impl<'a, F: Eq + Field> PartialEq for Poly<'a, F> {Poly18,360
    fn eq(&self, other: &Self) -> bool {eq19,412
impl<'a, F: Eq + Field> Clone for Poly<'a, F> {Poly32,716
    fn clone(&self) -> Self {clone33,764
impl<'a, F: Eq + Field> Add for Poly<'a, F> {Poly41,915
    fn add(self, other: Self) -> Self::Output {add44,986
impl<'a, F: Eq + Field> Add<&Poly<'a, F>> for Poly<'a, F> {Add49,1066
    fn add(self, other: &Self) -> Self::Output {add52,1151
impl<'a, F: Eq + Field> Add<Poly<'a, F>> for &Poly<'a, F> {Add57,1231
    fn add(self, other: Poly<'a, F>) -> Self::Output {add60,1323
impl<'a, F: Eq + Field> Add for &Poly<'a, F> {Add65,1409
    fn add(self, other: Self) -> Self::Output {add68,1488
impl<'a, F: Eq + Field> AddAssign<Poly<'a, F>> for Poly<'a, F> {AddAssign75,1615
    fn add_assign(&mut self, other: Self) {add_assign76,1680
impl<'a, F: Eq + Field> AddAssign<&Poly<'a, F>> for Poly<'a, F> {AddAssign81,1758
    fn add_assign(&mut self, other: &Self) {add_assign82,1824
impl<'a, F: Eq + Field> Sub for Poly<'a, F> {Poly95,2128
    fn sub(self, other: Self) -> Self::Output {sub98,2199
impl<'a, F: Eq + Field> Sub<&Poly<'a, F>> for Poly<'a, F> {Sub103,2279
    fn sub(self, other: &Self) -> Self::Output {sub106,2364
impl<'a, F: Eq + Field> Sub<Poly<'a, F>> for &Poly<'a, F> {Sub111,2444
    fn sub(self, other: Poly<'a, F>) -> Self::Output {sub114,2536
impl<'a, F: Eq + Field> Sub for &Poly<'a, F> {Sub119,2622
    fn sub(self, other: Self) -> Self::Output {sub122,2701
impl<'a, F: Eq + Field> SubAssign<Poly<'a, F>> for Poly<'a, F> {SubAssign129,2831
    fn sub_assign(&mut self, other: Self) {sub_assign130,2896
impl<'a, F: Eq + Field> SubAssign<&Poly<'a, F>> for Poly<'a, F> {SubAssign135,2974
    fn sub_assign(&mut self, other: &Self) {sub_assign136,3040
impl<'a, F: Eq + Field> Mul for Poly<'a, F> {Poly149,3344
    fn mul(self, other: Self) -> Self::Output {mul152,3415
impl<'a, F: Eq + Field> Mul<&Poly<'a, F>> for Poly<'a, F> {Mul157,3495
    fn mul(self, other: &Self) -> Self::Output {mul160,3580
impl<'a, F: Eq + Field> Mul<Poly<'a, F>> for &Poly<'a, F> {Mul165,3660
    fn mul(self, other: Poly<'a, F>) -> Self::Output {mul168,3752
impl<'a, F: Eq + Field> Mul for &Poly<'a, F> {Mul173,3838
    fn mul(self, other: Self) -> Self::Output {mul176,3917
impl<'a, F: Eq + Field> MulAssign<Poly<'a, F>> for Poly<'a, F> {MulAssign191,4303
    fn mul_assign(&mut self, other: Self) {mul_assign192,4368
impl<'a, F: Eq + Field> MulAssign<&Poly<'a, F>> for Poly<'a, F> {MulAssign197,4446
    fn mul_assign(&mut self, other: &Self) {mul_assign198,4512
impl<'a, F: Eq + Field> Neg for Poly<'a, F> {Poly215,4983
    fn neg(self) -> Self::Output {neg218,5054
impl<'a, F: Eq + Field> Neg for &Poly<'a, F> {Neg223,5113
    fn neg(self) -> Self::Output {neg226,5192
impl<'a, F: Eq + Field> Index<usize> for Poly<'a, F> {Poly237,5420
    fn index(&self, index: usize) -> &Self::Output {index240,5503
impl<'a, F: Eq + Field> IndexMut<usize> for Poly<'a, F> {Poly245,5591
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {index_mut246,5649
impl<'a, F: Eq + F2FiniteExtension> Debug for Poly<'a, F> {Poly251,5753
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {fmt252,5813
impl<'a, F: Eq + FiniteField> Display for Poly<'a, F> {Poly278,6520
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {fmt279,6576
impl<'a, F: Eq + Field> Poly<'a, F> {Poly305,7281
    pub fn new(field: &'a F, data: Vec<F::FElt>) -> Self {new306,7319
    pub fn zero(field: &'a F, len: usize) -> Self {zero310,7418
    pub fn x_n(field: &'a F, n: usize) -> Self {x_n320,7665
    pub fn support(f: &'a F, support: &[usize]) -> Self {support326,7828
    pub fn field(&self) -> &'a F {field344,8285
    pub fn degree(&self) -> usize {degree348,8346
    pub fn is_zero(&self) -> bool {is_zero356,8550
    pub fn update_len(&mut self) {update_len360,8652
    pub fn random(rng: &mut ThreadRng, f: &'a F, degree: usize) -> Self {random364,8741
    pub fn eval(&self, point: F::FElt) -> F::FElt {eval375,9055
    pub fn euclidean_division(a: &Self, b: &Self) -> (Self, Self) {euclidean_division389,9473
    pub fn modulo(&mut self, modulus: &Self) {modulo419,10452
    pub fn gcd(a: &Self, b: &Self) -> Self {gcd436,11009
    pub fn neg_mut(&mut self) {neg_mut448,11319
    pub fn extended_gcd(a: &Self, b: &Self) -> (Self, Self, Self, Self, Self) {extended_gcd458,11603
    pub fn inverse_modulo(&self, modulus: &Self) -> Self {inverse_modulo501,12800
pub mod characteristic_two;characteristic_two515,13195

goppa.rs,2569
type Result<T> = result::Result<T, Box<dyn Error>>;Result16,255
pub struct Goppa<'a, F: Eq + Field> {Goppa19,333
impl<'a, F> Debug for Goppa<'a, F>Goppa24,420
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {fmt28,494
impl<'a, F> Display for Goppa<'a, F>Goppa51,1174
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {fmt55,1250
impl<'a, F> Goppa<'a, F>Goppa78,1924
    pub fn new(poly: Poly<'a, F>, set: Vec<F::FElt>) -> Self {new82,1996
    pub fn random(rng: &mut ThreadRng, f: &'a F, n: usize, t: usize) -> Self {random101,2752
    pub fn len(&self) -> usize {len133,3894
    pub fn poly(&self) -> &Poly<'a, F> {poly137,3957
    pub fn set(&self) -> &Vec<F::FElt> {set141,4024
    pub fn field(&self) -> &'a F {field145,4090
    pub fn parity_check_x(&self) -> Mat<'a, F> {parity_check_x149,4158
    pub fn parity_check_y(&self) -> Mat<'a, F> {parity_check_y161,4460
    pub fn parity_check_z(&self) -> Mat<'a, F> {parity_check_z179,4898
    pub fn parity_check_xyz(&self) -> Mat<'a, F> {parity_check_xyz190,5166
    pub fn parity_check_from_xyz<'b>(xyz: &Mat<'a, F>, f2: &'b F2) -> Mat<'b, F2> {parity_check_from_xyz197,5359
    pub fn parity_check_matrix<'b>(&self, f2: &'b F2) -> Mat<'b, F2> {parity_check_matrix203,5531
    pub fn generator_from_xyz<'b>(xyz: &Mat<'a, F>, f2: &'b F2) -> (Mat<'b, F2>, Vec<usize>) {generator_from_xyz208,5698
    pub fn generator_from_parity_check_standard<'b>(h: &Mat<'b, F2>) -> Mat<'b, F2> {generator_from_parity_check_standard217,6102
    pub fn generator_from_parity_check<'b>(h: &Mat<'b, F2>) -> (Mat<'b, F2>, Vec<usize>) {generator_from_parity_check231,6491
    pub fn generator_matrix<'b>(&self, f2: &'b F2) -> Mat<'b, F2> {generator_matrix240,6876
    pub fn syndrome<'b>(&self, r: &RowVec<'b, F2>) -> Mat<'a, F> {syndrome245,7039
    pub fn syndrome_from_xyz<'b>(xyz: &Mat<'a, F>, r: &RowVec<'b, F2>) -> Mat<'a, F> {syndrome_from_xyz250,7197
    pub fn encode<'b>(&self, msg: &RowVec<'b, F2>) -> RowVec<'b, F2> {encode264,7618
    pub fn g_encode<'b>(g: &Mat<'b, F2>, msg: &RowVec<'b, F2>) -> RowVec<'b, F2> {g_encode270,7801
    pub fn decode<'b>(&self, rcv: &RowVec<'b, F2>) -> RowVec<'b, F2> {decode274,7907
    pub fn xyz_decode<'b>(&self, xyz: &Mat<'a, F>, rcv: &RowVec<'b, F2>) -> RowVec<'b, F2> {xyz_decode279,8063
impl<'a, F: Eq + F2FiniteExtension> Goppa<'a, F> {Goppa361,10604
    pub fn to_hex_string(&self) -> String {to_hex_string362,10655
    pub fn from_hex_string(s: &str, f: &'a F) -> Result<Self> {from_hex_string389,11467

main.rs,2031
pub mod crypto;crypto12,193
mod finite_field;finite_field13,209
pub mod goppa; // TODO: Warnings about dead code without the pub. Why ?goppa14,227
mod matrix;matrix15,299
mod polynomial;polynomial16,311
// const GOPPA_N_MIN: u32 = 4;GOPPA_N_MIN18,328
// const GOPPA_N_MAX: u32 = 1024;GOPPA_N_MAX19,359
// const GOPPA_N: u32 = 1024; // Code lengthGOPPA_N20,393
// const GOPPA_T: u32 = 50; // Code correction capacityGOPPA_T21,438
// const GOPPA_K: u32 = 524; // Code dimensionGOPPA_K22,494
const GOPPA_N_MIN: u32 = 4;GOPPA_N_MIN24,542
const GOPPA_N_MAX: u32 = 2048;GOPPA_N_MAX25,570
const GOPPA_N: u32 = 2048; // Code lengthGOPPA_N26,601
const GOPPA_T: u32 = 70; // Code correction capacityGOPPA_T27,643
// const GOPPA_K: u32 = 1278; // Code dimensionGOPPA_K28,696
// const GOPPA_N_MIN: u32 = 4;GOPPA_N_MIN30,745
// const GOPPA_N_MAX: u32 = 4096;GOPPA_N_MAX31,776
// const GOPPA_N: u32 = 4096; // Code lengthGOPPA_N32,810
// const GOPPA_T: u32 = 170; // Code correction capacityGOPPA_T33,855
// const GOPPA_K: u32 = 2056; // Code dimensionGOPPA_K34,912
const PLAINTEXT: &str = "plaintext.mce";PLAINTEXT36,961
const CIPHERTEXT: &str = "ciphertext.mce";CIPHERTEXT37,1002
const DECRYPTED: &str = "decrypted.mce";DECRYPTED38,1045
const PUBLIC_KEY: &str = "public_key.mce";PUBLIC_KEY39,1086
const SECRET_KEY: &str = "secret_key.mce";SECRET_KEY40,1129
fn get_program(path: &str) -> &str {get_program42,1173
fn print_help(program: &str, opts: Options) {print_help50,1324
fn keygen(pk_file: &str, sk_file: &str, n: u32, t: u32, verbose: bool) -> Result<(), MainError> {keygen62,1715
fn encrypt(encrypt92,2445
fn decrypt(sk_file: &str, ctxt_file: &str, dec_file: &str, verbose: bool) -> Result<(), MainError> {decrypt133,3427
fn plaintext(pk_file: &str, ptxt_file: &str, verbose: bool) -> Result<(), MainError> {plaintext175,4582
fn get_code_params(matches: &Matches) -> Result<(u32, u32), MainError> {get_code_params202,5289
fn main() -> Result<(), MainError> {main230,6219

finite_field/f7.rs,1397
const CARD: u32 = 7;CARD5,69
const EXP: [F7Elt; CARD as usize] = [1, 3, 2, 6, 4, 5, 1];EXP7,91
const LOG: [u32; CARD as usize] = [CARD as u32, 0, 2, 1, 4, 5, 3];LOG9,151
pub struct F7 {}F714,252
impl PartialEq for F7 {F716,270
    fn eq(&self, _other: &Self) -> bool {eq17,294
impl Field for F7 {F722,358
    fn zero(&self) -> Self::FElt {zero25,402
    fn one(&self) -> Self::FElt {one29,454
    fn characteristic(&self) -> u32 {characteristic33,505
    fn add(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt {add37,563
    fn sub(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt {sub41,657
    fn mul(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt {mul45,758
    fn neg(&self, a: Self::FElt) -> Self::FElt {neg61,1118
    fn inv(&self, a: Self::FElt) -> Option<Self::FElt> {inv65,1200
    fn random_element(&self, rng: &mut ThreadRng) -> Self::FElt {random_element73,1389
impl FiniteField for F7 {F778,1495
    fn characteristic_exponent(&self) -> u32 {characteristic_exponent79,1521
    fn exp(&self, n: u32) -> Self::FElt {exp83,1585
    fn log(&self, a: Self::FElt) -> Option<u32> {log87,1658
mod test {test97,1828
    fn f7_add() {f7_add101,1870
    fn f7_characteristic() {f7_characteristic115,2280
    fn f7_sub() {f7_sub129,2585
    fn f7_mul() {f7_mul140,2831
    fn f7_neg() {f7_neg158,3454
    fn f7_inv() {f7_inv171,3798

finite_field/f2m.rs,1888
pub struct F2m {F2m6,121
impl PartialEq for F2m {F2m13,252
    fn eq(&self, other: &Self) -> bool {eq14,277
impl Field for F2m {F2m19,361
    fn zero(&self) -> Self::FElt {zero22,404
    fn one(&self) -> Self::FElt {one26,456
    fn characteristic(&self) -> u32 {characteristic30,507
    fn add(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt {add34,562
    fn sub(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt {sub38,647
    fn mul(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt {mul42,741
    fn neg(&self, a: Self::FElt) -> Self::FElt {neg58,1128
    fn inv(&self, a: Self::FElt) -> Option<Self::FElt> {inv62,1194
    fn random_element(&self, rng: &mut ThreadRng) -> Self::FElt {random_element70,1399
impl FiniteField for F2m {F2m75,1511
    fn characteristic_exponent(&self) -> u32 {characteristic_exponent76,1538
    fn exp(&self, n: u32) -> Self::FElt {exp80,1607
    fn log(&self, a: Self::FElt) -> Option<u32> {log84,1685
impl CharacteristicTwo for F2m {F2m93,1847
    // fn from(&self, _f2: &F2, elt: <F2 as Field>::FElt) -> Self::FElt {from94,1880
impl F2FiniteExtension for F2m {F2m99,1981
    fn elt_to_u32(&self, a: Self::FElt) -> u32 {elt_to_u32100,2014
    fn u32_to_elt(&self, n: u32) -> Self::FElt {u32_to_elt104,2080
impl F2m {F2m109,2148
    pub fn generate(order: u32) -> Self {generate110,2159
    fn primitive_poly(order: u32) -> u32 {primitive_poly135,2789
pub fn prime_power(q: u32) -> std::result::Result<(u32, u32), &'static str> {prime_power169,3797
pub fn trial_division(mut n: u32) -> Vec<u32> {trial_division189,4502
mod test {test215,5010
    fn f256_add() {f256_add219,5052
    fn f256_characteristic() {f256_characteristic233,5476
    fn f256_sub() {f256_sub243,5711
    fn f256_mul() {f256_mul253,5963
    fn f256_neg() {f256_neg271,6600
    fn f256_inv() {f256_inv284,6958

finite_field/f2.rs,1191
pub struct F2 {}F26,132
impl Field for F2 {F28,150
    fn zero(&self) -> Self::FElt {zero17,376
    fn one(&self) -> Self::FElt {one27,617
    fn characteristic(&self) -> u32 {characteristic37,848
    fn add(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt {add50,1182
    fn sub(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt {sub63,1552
    fn mul(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt {mul76,1931
    fn neg(&self, a: Self::FElt) -> Self::FElt {neg87,2230
    fn inv(&self, a: Self::FElt) -> Option<Self::FElt> {inv97,2524
    fn random_element(&self, rng: &mut ThreadRng) -> Self::FElt {random_element106,2718
impl FiniteField for F2 {F2111,2821
    fn characteristic_exponent(&self) -> u32 {characteristic_exponent118,3071
    fn exp(&self, _n: u32) -> Self::FElt {exp129,3361
    fn log(&self, a: Self::FElt) -> Option<u32> {log140,3671
    fn elt_to_str(&self, a: Self::FElt) -> String {elt_to_str149,3855
impl CharacteristicTwo for F2 {}F2154,3938
impl F2FiniteExtension for F2 {F2156,3972
    fn elt_to_u32(&self, a: Self::FElt) -> u32 {elt_to_u32158,4039
    fn u32_to_elt(&self, n: u32) -> Self::FElt {u32_to_elt164,4256

finite_field/mod.rs,1113
pub mod f2;f27,79
pub mod f2m;f2m8,91
pub mod f7;f79,104
pub trait Field {Field11,117
    fn zero(&self) -> Self::FElt;zero14,179
    fn one(&self) -> Self::FElt;one15,213
    fn characteristic(&self) -> u32;characteristic16,246
    fn add(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt;add17,283
    fn sub(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt;sub18,346
    fn mul(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt;mul19,409
    fn neg(&self, a: Self::FElt) -> Self::FElt;neg20,472
    fn inv(&self, a: Self::FElt) -> Option<Self::FElt>;inv21,520
    fn random_element(&self, rng: &mut ThreadRng) -> Self::FElt;random_element22,576
    fn characteristic_exponent(&self) -> u32;characteristic_exponent26,675
    fn order(&self) -> u32 {order27,721
    fn exp(&self, n: u32) -> Self::FElt;exp30,822
    fn log(&self, a: Self::FElt) -> Option<u32>;log31,863
    fn elt_to_str(&self, a: Self::FElt) -> String {elt_to_str32,912
    fn elt_to_u32(&self, a: Self::FElt) -> u32;elt_to_u3249,1435
    fn u32_to_elt(&self, n: u32) -> Self::FElt;u32_to_elt50,1483

lib.rs,157
pub mod crypto;crypto1,0
pub mod finite_field;finite_field2,16
pub mod goppa;goppa3,38
pub mod matrix;matrix4,53
pub mod polynomial;polynomial5,69

matrix/gauss.rs,1471
impl<'a, F: Eq + Field> Mat<'a, F> {Mat5,67
    pub fn swap_rows(&mut self, row1: usize, row2: usize) {swap_rows6,104
    pub fn swap_cols(&mut self, col1: usize, col2: usize) {swap_cols19,611
    pub fn combine_rows(&mut self, row1: usize, lambda: F::FElt, row2: usize) {combine_rows30,897
    pub fn mul_row(&mut self, row: usize, lambda: F::FElt) {mul_row37,1140
    pub fn inverse(&self) -> Option<Self> {inverse45,1429
    // pub fn invertible_random(rng: &mut ThreadRng, f: &'a F, n: usize) -> Self {invertible_random126,4015
    pub fn invertible_random(rng: &mut ThreadRng, f: &'a F, n: usize) -> Self {invertible_random145,4663
    pub fn row_echelon_form(&mut self) -> Vec<usize> {row_echelon_form186,6182
    pub fn reduced_row_echelon_form(&mut self) -> usize {reduced_row_echelon_form237,7835
    pub fn rank(&self) -> usize {rank270,8881
    pub fn max_set_of_independant_rows(&mut self) -> Vec<usize> {max_set_of_independant_rows275,8995
    pub fn is_invertible(&self) -> bool {is_invertible279,9100
    pub fn standard_form(&self) -> Option<(Self, Self, Perm)> {standard_form285,9334
    pub fn standard_parity_check_equivalent(&self) -> (Self, Perm) {standard_parity_check_equivalent359,12058
    pub fn is_standard_form(&self) -> bool {is_standard_form427,14459
    // pub fn col_echelon_form(&mut self) -> usize {col_echelon_form450,15039
    pub fn remove_redundant_rows(&mut self) {remove_redundant_rows498,16665

matrix/traits.rs,3814
impl<'a, F: Eq + Field> Clone for Mat<'a, F> {Mat9,229
    fn clone(&self) -> Self {clone10,276
impl<'a, F: Eq + Field> Add for Mat<'a, F> {Mat20,484
    fn add(self, other: Self) -> Self::Output {add23,554
impl<'a, F: Eq + Field> Add<&Mat<'a, F>> for Mat<'a, F> {Add28,634
    fn add(self, other: &Self) -> Self::Output {add31,717
impl<'a, F: Eq + Field> Add<Mat<'a, F>> for &Mat<'a, F> {Add36,797
    fn add(self, other: Mat<'a, F>) -> Self::Output {add39,886
impl<'a, F: Eq + Field> Add for &Mat<'a, F> {Add44,971
    fn add(self, other: Self) -> Self::Output {add47,1048
impl<'a, F: Eq + Field> AddAssign<Mat<'a, F>> for Mat<'a, F> {AddAssign63,1561
    fn add_assign(&mut self, other: Self) {add_assign64,1624
impl<'a, F: Eq + Field> AddAssign<&Mat<'a, F>> for Mat<'a, F> {AddAssign69,1702
    fn add_assign(&mut self, other: &Self) {add_assign70,1766
impl<'a, F: Eq + Field> Sub for Mat<'a, F> {Mat84,2207
    fn sub(self, other: Self) -> Self::Output {sub87,2277
impl<'a, F: Eq + Field> Sub<&Mat<'a, F>> for Mat<'a, F> {Sub92,2357
    fn sub(self, other: &Self) -> Self::Output {sub95,2440
impl<'a, F: Eq + Field> Sub<Mat<'a, F>> for &Mat<'a, F> {Sub100,2520
    fn sub(self, other: Mat<'a, F>) -> Self::Output {sub103,2609
impl<'a, F: Eq + Field> Sub for &Mat<'a, F> {Sub108,2694
    fn sub(self, other: Self) -> Self::Output {sub111,2771
impl<'a, F: Eq + Field> SubAssign<Mat<'a, F>> for Mat<'a, F> {SubAssign127,3299
    fn sub_assign(&mut self, other: Self) {sub_assign128,3362
impl<'a, F: Eq + Field> SubAssign<&Mat<'a, F>> for Mat<'a, F> {SubAssign133,3440
    fn sub_assign(&mut self, other: &Self) {sub_assign134,3504
impl<'a, F: Eq + Field> Mul for Mat<'a, F> {Mat148,3957
    fn mul(self, other: Self) -> Self::Output {mul151,4027
impl<'a, F: Eq + Field> Mul<&Mat<'a, F>> for Mat<'a, F> {Mul156,4107
    fn mul(self, other: &Self) -> Self::Output {mul159,4190
impl<'a, F: Eq + Field> Mul<Mat<'a, F>> for &Mat<'a, F> {Mul164,4270
    fn mul(self, other: Mat<'a, F>) -> Self::Output {mul167,4359
impl<'a, F: Eq + Field> Mul for &Mat<'a, F> {Mul172,4444
    fn mul(self, other: Self) -> Self::Output {mul175,4521
impl<'a, F: Eq + Field> MulAssign<Mat<'a, F>> for Mat<'a, F> {MulAssign195,5146
    fn mul_assign(&mut self, other: Self) {mul_assign196,5209
impl<'a, F: Eq + Field> MulAssign<&Mat<'a, F>> for Mat<'a, F> {MulAssign201,5287
    fn mul_assign(&mut self, other: &Self) {mul_assign202,5351
impl<'a, F: Eq + Field> Mul<Perm> for Mat<'a, F> {Mat222,5998
    fn mul(self, other: Perm) -> Self::Output {mul225,6074
impl<'a, F: Eq + Field> Mul<&Perm> for Mat<'a, F> {Mat230,6154
    fn mul(self, other: &Perm) -> Self::Output {mul233,6231
impl<'a, F: Eq + Field> Mul<Perm> for &Mat<'a, F> {Mul238,6311
    fn mul(self, other: Perm) -> Self::Output {mul241,6394
impl<'a, F: Eq + Field> Mul<&Perm> for &Mat<'a, F> {Mul246,6473
    fn mul(self, perm: &Perm) -> Self::Output {mul249,6557
impl<'a, F: Eq + Field> Neg for Mat<'a, F> {Mat257,6774
    fn neg(self) -> Self::Output {neg260,6844
impl<'a, F: Eq + Field> Neg for &Mat<'a, F> {Neg265,6903
    fn neg(self) -> Self::Output {neg268,6980
impl<'a, F: Eq + Field> Index<(usize, usize)> for Mat<'a, F> {Mat279,7224
    fn index(&self, index: (usize, usize)) -> &Self::Output {index282,7315
impl<'a, F: Eq + Field> IndexMut<(usize, usize)> for Mat<'a, F> {Mat287,7436
    fn index_mut(&mut self, index: (usize, usize)) -> &mut Self::Output {index_mut288,7502
impl<'a, F: Eq + F2FiniteExtension> Debug for Mat<'a, F> {Mat293,7639
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {fmt294,7698
impl<'a, F: Eq + FiniteField> Display for Mat<'a, F> {Mat314,8288
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {fmt315,8343

matrix/perm.rs,779
pub struct Perm(Vec<usize>);Perm5,100
impl Index<usize> for Perm {Perm7,130
    fn index(&self, index: usize) -> &Self::Output {index10,185
impl IndexMut<usize> for Perm {Perm15,270
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {index_mut16,302
impl Perm {Perm21,403
    pub fn new(vec: Vec<usize>) -> Result<Self, &'static str> {new22,415
    pub fn random(rng: &mut ThreadRng, n: usize) -> Self {random38,849
    pub fn identity(n: usize) -> Self {identity53,1233
    pub fn len(&self) -> usize {len61,1406
    pub fn data(&self) -> &Vec<usize> {data65,1467
    pub fn swap(&mut self, i: usize, j: usize) {swap69,1530
    pub fn inverse(&self) -> Self {inverse73,1617
    pub fn is_permutation(&self) -> bool {is_permutation81,1794

matrix/rowvec.rs,5331
type Result<T> = std::result::Result<T, Box<dyn Error>>;Result13,324
pub struct RowVec<'a, F: Eq + Field>(Mat<'a, F>);RowVec16,407
impl<'a, F: Eq + Field> Clone for RowVec<'a, F> {RowVec18,458
    fn clone(&self) -> Self {clone19,508
impl<'a, F: Eq + Field> Add for RowVec<'a, F> {RowVec24,578
    fn add(self, other: Self) -> Self::Output {add27,651
impl<'a, F: Eq + Field> Add<&RowVec<'a, F>> for RowVec<'a, F> {Add32,731
    fn add(self, other: &Self) -> Self::Output {add35,820
impl<'a, F: Eq + Field> Add<RowVec<'a, F>> for &RowVec<'a, F> {Add40,900
    fn add(self, other: RowVec<'a, F>) -> Self::Output {add43,998
impl<'a, F: Eq + Field> Add for &RowVec<'a, F> {Add48,1086
    fn add(self, other: Self) -> Self::Output {add51,1169
impl<'a, F: Eq + Field> AddAssign<RowVec<'a, F>> for RowVec<'a, F> {AddAssign56,1261
    fn add_assign(&mut self, other: Self) {add_assign57,1330
impl<'a, F: Eq + Field> AddAssign<&RowVec<'a, F>> for RowVec<'a, F> {AddAssign62,1408
    fn add_assign(&mut self, other: &Self) {add_assign63,1478
impl<'a, F: Eq + Field> Sub for RowVec<'a, F> {RowVec68,1560
    fn sub(self, other: Self) -> Self::Output {sub71,1633
impl<'a, F: Eq + Field> Sub<&RowVec<'a, F>> for RowVec<'a, F> {Sub76,1713
    fn sub(self, other: &Self) -> Self::Output {sub79,1802
impl<'a, F: Eq + Field> Sub<RowVec<'a, F>> for &RowVec<'a, F> {Sub84,1882
    fn sub(self, other: RowVec<'a, F>) -> Self::Output {sub87,1980
impl<'a, F: Eq + Field> Sub for &RowVec<'a, F> {Sub92,2068
    fn sub(self, other: Self) -> Self::Output {sub95,2151
impl<'a, F: Eq + Field> SubAssign<RowVec<'a, F>> for RowVec<'a, F> {SubAssign100,2243
    fn sub_assign(&mut self, other: Self) {sub_assign101,2312
impl<'a, F: Eq + Field> SubAssign<&RowVec<'a, F>> for RowVec<'a, F> {SubAssign106,2390
    fn sub_assign(&mut self, other: &Self) {sub_assign107,2460
impl<'a, F: Eq + Field> Mul<Mat<'a, F>> for RowVec<'a, F> {Mul112,2542
    fn mul(self, other: Mat<'a, F>) -> Self::Output {mul115,2627
impl<'a, F: Eq + Field> Mul<&Mat<'a, F>> for RowVec<'a, F> {Mul120,2713
    fn mul(self, other: &Mat<'a, F>) -> Self::Output {mul123,2799
impl<'a, F: Eq + Field> Mul<Mat<'a, F>> for &RowVec<'a, F> {Mul128,2885
    fn mul(self, other: Mat<'a, F>) -> Self::Output {mul131,2980
impl<'a, F: Eq + Field> Mul<&Mat<'a, F>> for &RowVec<'a, F> {Mul136,3065
    fn mul(self, other: &Mat<'a, F>) -> Self::Output {mul139,3161
impl<'a, F: Eq + Field> MulAssign<Mat<'a, F>> for RowVec<'a, F> {MulAssign144,3257
    fn mul_assign(&mut self, other: Mat<'a, F>) {mul_assign145,3323
impl<'a, F: Eq + Field> MulAssign<&Mat<'a, F>> for RowVec<'a, F> {MulAssign150,3407
    fn mul_assign(&mut self, other: &Mat<'a, F>) {mul_assign151,3474
impl<'a, F: Eq + Field> Neg for RowVec<'a, F> {RowVec156,3559
    fn neg(self) -> Self::Output {neg159,3632
impl<'a, F: Eq + Field> Neg for &RowVec<'a, F> {Neg164,3691
    fn neg(self) -> Self::Output {neg167,3774
impl<'a, F: Eq + Field> Index<usize> for RowVec<'a, F> {RowVec172,3843
    fn index(&self, index: usize) -> &Self::Output {index175,3928
impl<'a, F: Eq + Field> IndexMut<usize> for RowVec<'a, F> {RowVec180,4018
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {index_mut181,4078
impl<'a, F: Eq + F2FiniteExtension> Debug for RowVec<'a, F> {RowVec186,4184
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {fmt187,4246
impl<'a, F: Eq + FiniteField> Display for RowVec<'a, F> {RowVec192,4347
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {fmt193,4405
impl<'a, F: Eq + Field> RowVec<'a, F> {RowVec198,4504
    pub fn new(field: &'a F, data: Vec<F::FElt>) -> Self {new199,4544
    pub fn zero(field: &'a F, cols: usize) -> Self {zero206,4742
    pub fn field(&self) -> &'a F {field210,4844
    pub fn rows(&self) -> usize {rows214,4909
    pub fn cols(&self) -> usize {cols218,4960
    pub fn data(&self) -> &Vec<F::FElt> {data222,5023
    pub fn weight(&self) -> usize {weight226,5094
    pub fn random(rng: &mut ThreadRng, f: &'a F, n: usize) -> Self {random236,5315
    pub fn random_with_weight(rng: &mut ThreadRng, f: &'a F, n: usize, w: usize) -> Self {random_with_weight240,5433
    // pub fn sum(&mut self, vec1: &Self, vec2: &Self) {sum263,6166
    // pub fn from<'b>(f: &'a F, vec_f2: &RowVec<'b, F2>) -> Selffrom274,6595
    pub fn transpose(&self) -> Mat<'a, F> {transpose281,6769
    pub fn is_zero(&self) -> bool {is_zero285,6847
    pub fn extract_cols(&self, perm: &Vec<usize>) -> Self {extract_cols294,7039
impl<'a> RowVec<'a, F2> {RowVec299,7150
    pub fn write(&self, file_name: &str) -> Result<()> {write300,7176
    pub fn read_vector(file_name: &str, f2: &'a F2) -> Result<RowVec<'a, F2>> {read_vector323,7885
impl<'a, F: Eq + Field> Mul<Perm> for RowVec<'a, F> {RowVec348,8786
    fn mul(self, other: Perm) -> Self::Output {mul351,8865
impl<'a, F: Eq + Field> Mul<&Perm> for RowVec<'a, F> {RowVec356,8945
    fn mul(self, other: &Perm) -> Self::Output {mul359,9025
impl<'a, F: Eq + Field> Mul<Perm> for &RowVec<'a, F> {Mul364,9105
    fn mul(self, other: Perm) -> Self::Output {mul367,9194
impl<'a, F: Eq + Field> Mul<&Perm> for &RowVec<'a, F> {Mul372,9273
    fn mul(self, other: &Perm) -> Self::Output {mul375,9363

matrix/f2.rs,1469
type Result<T> = std::result::Result<T, Box<dyn Error>>;Result7,128
impl<'a> Mat<'a, F2> {Mat9,186
    // pub fn add_rows(&mut self, row1: usize, row2: usize) {add_rows10,209
    // pub fn inverse_f2(&self) -> Option<Self> {inverse_f219,550
    // pub fn invertible_random_f2(rng: &mut ThreadRng, f2: &'a F2, n: usize) -> Self {invertible_random_f289,2964
    // pub fn standard_parity_check_equivalent_f2(&self) -> (Self, Perm) {standard_parity_check_equivalent_f2122,4204
    // pub fn row_echelon_form_f2(&mut self) -> usize {row_echelon_form_f2183,6421
    // pub fn reduced_row_echelon_form_f2(&mut self) -> usize {reduced_row_echelon_form_f2221,7614
    // pub fn rank_f2(&self) -> usize {rank_f2251,8638
    // pub fn standard_form_f2(&self) -> Option<(Self, Self, Perm)> {standard_form_f2258,8896
    // pub fn max_set_of_independant_rows_f2(&mut self) -> Vec<usize> {max_set_of_independant_rows_f2319,11122
    // pub fn remove_redundant_rows_f2(&mut self) {remove_redundant_rows_f2359,12432
    pub fn to_hex_string(&self) -> String {to_hex_string365,12661
    pub fn from_hex_string(s: &str, f2: &'a F2) -> Result<Self> {from_hex_string392,13602
// impl<'a, F: CharacteristicTwo + Eq> Mat<'a, F> {Mat415,14299
//     pub fn from<'b>(f: &'a F, mat_f2: &Mat<'b, F2>) -> Self {from416,14351
impl<'a, F: Eq + F2FiniteExtension> Mat<'a, F> {Mat427,14712
    pub fn binary<'b>(&self, f2: &'b F2) -> Mat<'b, F2> {binary428,14761

matrix/mod.rs,1357
// type Result<T> = std::result::Result<T, Box<dyn Error>>;Result10,252
pub fn div_ceil(a: u32, b: u32) -> u32 {div_ceil15,358
pub struct Mat<'a, F: Eq + Field> {Mat20,470
impl<'a, F: Eq + Field> Mat<'a, F> {Mat27,585
    pub fn new(field: &'a F, rows: usize, cols: usize, data: Vec<F::FElt>) -> Self {new28,622
    pub fn zero(field: &'a F, rows: usize, cols: usize) -> Self {zero40,901
    pub fn field(&self) -> &'a F {field49,1105
    pub fn rows(&self) -> usize {rows53,1166
    pub fn cols(&self) -> usize {cols57,1225
    pub fn data(&self) -> &Vec<F::FElt> {data61,1284
    pub fn random(rng: &mut ThreadRng, f: &'a F, n: usize, m: usize) -> Self {random65,1352
    pub fn is_zero(&self) -> bool {is_zero75,1622
    pub fn extract_cols(&self, cols: &Vec<usize>) -> Self {extract_cols86,1877
    pub fn identity(f: &'a F, n: usize) -> Self {identity96,2172
    // pub fn sum(&mut self, mat1: &Self, mat2: &Self) {sum104,2350
    // pub fn prod(&mut self, mat1: &Self, mat2: &Self) {prod123,3002
    pub fn transpose(&self) -> Self {transpose142,3731
    fn keep_rows(&mut self, rows: &Vec<usize>) {keep_rows154,4018
    fn remove_rows(&mut self, rows: &Vec<usize>) {remove_rows175,4798
mod f2;f2191,5296
mod gauss;gauss192,5304
mod perm;perm193,5315
mod rowvec;rowvec194,5325
mod traits;traits195,5337

crypto.rs,1302
type Result<T> = std::result::Result<T, Box<dyn Error>>;Result13,213
pub struct PublicKey<'a> {PublicKey16,303
pub struct SecretKey<'a, 'b> {SecretKey22,500
pub fn keygen<'a, 'b>(keygen29,747
impl<'a> PublicKey<'a> {PublicKey65,1705
    pub fn sgp(&self) -> &Mat<'a, F2> {sgp66,1730
    pub fn t(&self) -> u32 {t70,1795
    pub fn encrypt(&self, m: &RowVec<'a, F2>) -> RowVec<'a, F2> {encrypt74,1850
    pub fn write(&self, file_name: &str) -> Result<()> {write85,2229
    pub fn read_public_key(file_name: &str, f2: &'a F2) -> Result<Self> {read_public_key92,2473
    pub fn read_code_dimension(file_name: &str) -> Result<u32> {read_code_dimension106,2993
impl<'a, 'b> SecretKey<'a, 'b> {SecretKey117,3326
    pub fn s(&self) -> &Mat<'a, F2> {s118,3359
    pub fn goppa(&self) -> &Goppa<'b, F2m> {goppa122,3420
    pub fn info_set(&self) -> &Vec<usize> {info_set126,3492
    pub fn p(&self) -> &Perm {p130,3566
    pub fn decrypt(&self, c: &RowVec<'a, F2>) -> RowVec<'a, F2> {decrypt134,3620
    pub fn write(&self, file_name: &str) -> Result<()> {write149,4080
    pub fn read_finite_field(file_name: &str) -> Result<F2m> {read_finite_field167,4792
    pub fn read_secret_key(file_name: &str, f2: &'a F2, f2m: &'b F2m) -> Result<Self> {read_secret_key178,5197
