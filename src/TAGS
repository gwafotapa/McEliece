
polynomial/io.rs,234
type Result<T> = std::result::Result<T, Box<dyn Error>>;Result8,223
impl Poly<F2m> {Poly10,281
    pub fn to_bytes(&self) -> Vec<u8> {to_bytes15,488
    pub fn from_bytes(vec: &[u8]) -> Result<(usize, Self)> {from_bytes27,936

polynomial/traits.rs,2811
impl<F> PartialEq for Poly<F>Poly11,259
    fn eq(&self, other: &Self) -> bool {eq15,316
impl<F> Clone for Poly<F>Poly28,620
    fn clone(&self) -> Self {clone32,673
impl<F> Add for Poly<F>Poly40,817
    fn add(mut self, other: Self) -> Self::Output {add46,893
impl<F> Add<&Poly<F>> for Poly<F>Add52,991
    fn add(mut self, other: &Self) -> Self::Output {add58,1077
impl<F> Add<Poly<F>> for &Poly<F>Add64,1175
    fn add(self, mut other: Poly<F>) -> Self::Output {add70,1264
impl<F> Add for &Poly<F>Add76,1365
    fn add(self, other: Self) -> Self::Output {add82,1445
impl<F> AddAssign<Poly<F>> for Poly<F>AddAssign89,1572
    fn add_assign(&mut self, other: Self) {add_assign93,1638
impl<F> AddAssign<&Poly<F>> for Poly<F>AddAssign98,1716
    fn add_assign(&mut self, other: &Self) {add_assign102,1783
impl<F> Sub for Poly<F>Poly116,2099
    fn sub(mut self, other: Self) -> Self::Output {sub122,2175
impl<F> Sub<&Poly<F>> for Poly<F>Sub128,2273
    fn sub(mut self, other: &Self) -> Self::Output {sub134,2359
impl<F> Sub<Poly<F>> for &Poly<F>Sub140,2457
    fn sub(self, other: Poly<F>) -> Self::Output {sub146,2546
impl<F> Sub for &Poly<F>Sub151,2628
    fn sub(self, other: Self) -> Self::Output {sub157,2708
impl<F> SubAssign<Poly<F>> for Poly<F>SubAssign164,2838
    fn sub_assign(&mut self, other: Self) {sub_assign168,2904
impl<F> SubAssign<&Poly<F>> for Poly<F>SubAssign173,2982
    fn sub_assign(&mut self, other: &Self) {sub_assign177,3049
impl<F> Mul for Poly<F>Poly191,3365
    fn mul(self, other: Self) -> Self::Output {mul197,3441
impl<F> Mul<&Poly<F>> for Poly<F>Mul202,3521
    fn mul(self, other: &Self) -> Self::Output {mul208,3607
impl<F> Mul<Poly<F>> for &Poly<F>Mul213,3687
    fn mul(self, other: Poly<F>) -> Self::Output {mul219,3776
impl<F> Mul for &Poly<F>Mul224,3858
    fn mul(self, other: Self) -> Self::Output {mul230,3938
impl<F> MulAssign<Poly<F>> for Poly<F>MulAssign245,4339
    fn mul_assign(&mut self, other: Self) {mul_assign249,4405
impl<F> MulAssign<&Poly<F>> for Poly<F>MulAssign254,4483
    fn mul_assign(&mut self, other: &Self) {mul_assign258,4550
impl<F> Neg for Poly<F>Poly275,5022
    fn neg(mut self) -> Self::Output {neg281,5098
impl<F> Neg for &Poly<F>Neg292,5337
    fn neg(self) -> Self::Output {neg298,5417
impl<F> Index<usize> for Poly<F>Poly304,5506
    fn index(&self, index: usize) -> &Self::Output {index310,5602
impl<F> IndexMut<usize> for Poly<F>Poly315,5690
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {index_mut319,5753
impl<F> Debug for Poly<F>Poly324,5857
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {fmt328,5917
impl<F> Display for Poly<F>Poly354,6626
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {fmt358,6682

polynomial/characteristic_two.rs,636
impl<F> Poly<F>Poly4,107
    pub fn random_monic_irreducible(field: Field<F>, degree: usize) -> Selfrandom_monic_irreducible8,170
    pub fn is_irreducible(&self) -> boolis_irreducible26,679
    pub fn square_root_modulo(&mut self, modulus: &Self)square_root_modulo64,1743
    pub fn inverse_modulo_by_fast_exponentiation(&mut self, modulus: &Self)inverse_modulo_by_fast_exponentiation79,2164
    pub fn square(&mut self) {square101,2813
    pub fn pow_modulo(&mut self, mut n: u32, modulus: &Self) {pow_modulo113,3191
    pub(crate) fn goppa_extended_gcd(g: &Self, t: &Self) -> (Self, Self) {goppa_extended_gcd136,3818

polynomial/mod.rs,1228
pub struct Poly<F>Poly9,153
impl<F> Poly<F>Poly17,252
    pub fn new(field: Field<F>, data: Vec<F::FieldElement>) -> Self {new26,437
    pub fn zero(field: Field<F>, len: usize) -> Self {zero44,985
    pub fn x_n(field: Field<F>, n: usize) -> Self {x_n57,1420
    pub fn support(field: Field<F>, support: &[usize]) -> Self {support73,1918
    pub fn field(&self) -> &Rc<F> {field92,2507
    pub fn degree(&self) -> usize {degree96,2570
    pub fn is_zero(&self) -> bool {is_zero104,2774
    fn update_len(&mut self) {update_len109,2952
    pub fn random(field: Field<F>, degree: usize) -> Self {random114,3100
    pub fn eval(&self, point: F::FieldElement) -> F::FieldElement {eval127,3512
    pub fn euclidean_division(a: &Self, b: &Self) -> (Self, Self) {euclidean_division141,3951
    pub fn modulo(&mut self, modulus: &Self) {modulo171,4958
    pub fn gcd(a: &Self, b: &Self) -> Self {gcd187,5532
    pub fn extended_gcd(a: &Self, b: &Self) -> (Self, Self, Self, Self, Self) {extended_gcd200,5917
    pub fn inverse_modulo(&self, modulus: &Self) -> Self {inverse_modulo243,7160
pub mod io;io257,7557
pub mod characteristic_two;characteristic_two258,7569
pub mod traits;traits259,7597

goppa/io.rs,233
type Result<T> = result::Result<T, Box<dyn Error>>;Result12,254
impl Goppa<F2m> {Goppa14,307
    pub fn to_bytes(&self) -> Vec<u8> {to_bytes25,777
    pub fn from_bytes(vec: &[u8]) -> Result<(usize, Self)> {from_bytes51,1476

goppa/mod.rs,2096
pub struct Goppa<F>Goppa18,327
impl<F> Debug for Goppa<F>Goppa26,427
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {fmt30,488
impl<F> Display for Goppa<F>Goppa53,1154
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {fmt57,1217
impl<F> Goppa<F>Goppa80,1877
    pub fn new(poly: Poly<F>, set: Vec<F::FieldElement>) -> Self {new98,2495
    pub fn random(field: Field<F>, n: usize, t: usize) -> Self {random126,3637
    pub fn len(&self) -> usize {len162,4818
    pub fn poly(&self) -> &Poly<F> {poly166,4881
    pub fn set(&self) -> &Vec<F::FieldElement> {set170,4944
    pub fn field(&self) -> &Rc<F> {field174,5018
    pub fn parity_check_x(&self) -> Mat<F> {parity_check_x178,5087
    pub fn parity_check_y(&self) -> Mat<F> {parity_check_y190,5398
    pub fn parity_check_z(&self) -> Mat<F> {parity_check_z208,5845
    pub fn parity_check_xyz(&self) -> Mat<F> {parity_check_xyz219,6122
    pub fn parity_check_from_xyz(xyz: &Mat<F>, f2: Field<F2>) -> Mat<F2> {parity_check_from_xyz226,6311
    pub fn parity_check_matrix(&self, f2: Field<F2>) -> Mat<F2> {parity_check_matrix232,6474
    pub fn generator_from_xyz(xyz: &Mat<F>, f2: Field<F2>) -> (Mat<F2>, Vec<usize>) {generator_from_xyz237,6636
    pub fn generator_from_parity_check_standard(h: &Mat<F2>) -> Mat<F2> {generator_from_parity_check_standard246,7031
    pub fn generator_from_parity_check(h: &Mat<F2>) -> (Mat<F2>, Vec<usize>) {generator_from_parity_check260,7421
    pub fn generator_matrix(&self, f2: Field<F2>) -> Mat<F2> {generator_matrix269,7794
    pub fn syndrome(&self, r: &RowVec<F2>) -> Mat<F> {syndrome274,7952
    pub fn syndrome_from_xyz(xyz: &Mat<F>, rcv: &RowVec<F2>) -> Mat<F> {syndrome_from_xyz279,8098
    pub fn encode(&self, msg: &RowVec<F2>) -> RowVec<F2> {encode293,8524
    pub fn g_encode(g: &Mat<F2>, msg: &RowVec<F2>) -> RowVec<F2> {g_encode299,8708
    pub fn decode(&self, rcv: &RowVec<F2>) -> RowVec<F2> {decode303,8798
    pub fn xyz_decode(&self, xyz: &Mat<F>, rcv: &RowVec<F2>) -> RowVec<F2> {xyz_decode308,8942
pub mod io;io364,10457

main.rs,1531
// const GOPPA_N_MIN: usize = 3;GOPPA_N_MIN14,285
// const GOPPA_N_MAX: usize = 1024;GOPPA_N_MAX15,318
// const GOPPA_N: usize = 1024;GOPPA_N16,354
// const GOPPA_T: usize = 50;GOPPA_T17,386
// const GOPPA_K: usize = 524;GOPPA_K18,416
// const GOPPA_N_MIN: usize = 3;GOPPA_N_MIN20,448
// const GOPPA_N_MAX: usize = 2048;GOPPA_N_MAX21,481
// const GOPPA_N: usize = 2048;GOPPA_N22,517
// const GOPPA_T: usize = 70;GOPPA_T23,549
// const GOPPA_K: usize = 1278;GOPPA_K24,579
// const GOPPA_N_MIN: usize = 3;GOPPA_N_MIN26,612
// const GOPPA_N_MAX: usize = 4096;GOPPA_N_MAX27,645
// const GOPPA_N: usize = 4096;GOPPA_N28,681
// const GOPPA_T: usize = 170;GOPPA_T29,713
// const GOPPA_K: usize = 2056;GOPPA_K30,744
const GOPPA_N_MIN: usize = 3;GOPPA_N_MIN32,777
const GOPPA_N_MAX: usize = 2048;GOPPA_N_MAX33,807
const GOPPA_N_DEFAULT: usize = 1024;GOPPA_N_DEFAULT34,840
const GOPPA_T_DEFAULT: usize = 50;GOPPA_T_DEFAULT35,877
const PLAINTEXT: &str = "plaintext.mce";PLAINTEXT37,913
const CIPHERTEXT: &str = "ciphertext.mce";CIPHERTEXT38,954
const DECRYPTED: &str = "decrypted.mce";DECRYPTED39,997
const PUBLIC_KEY: &str = "public_key.mce";PUBLIC_KEY40,1038
const SECRET_KEY: &str = "secret_key.mce";SECRET_KEY41,1081
fn get_program(path: &str) -> &str {get_program43,1125
fn get_code_params(matches: &Matches) -> Result<(usize, usize), MainError> {get_code_params51,1276
fn print_help(program: &str, opts: Options) {print_help79,2160
fn main() -> Result<(), MainError> {main91,2565

finite_field/f7.rs,1632
const ORDER: usize = 7;ORDER8,128
const EXP: [F7Element; ORDER] = [1, 3, 2, 6, 4, 5, 1];EXP10,153
const LOG: [u32; ORDER] = [ORDER as u32, 0, 2, 1, 4, 5, 3];LOG12,209
pub struct F7 {}F719,350
impl PartialEq for F7 {F721,368
    fn eq(&self, _other: &Self) -> bool {eq22,392
impl FieldTrait for F7 {F727,456
    fn generate(_params: Self::FieldParameters) -> Self {generate35,635
    fn zero(&self) -> Self::FieldElement {zero45,903
    fn one(&self) -> Self::FieldElement {one55,1157
    fn characteristic(&self) -> usize {characteristic65,1401
    fn add(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement {add78,1746
    fn sub(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement {sub91,2164
    fn mul(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement {mul96,2313
    fn neg(&self, a: Self::FieldElement) -> Self::FieldElement {neg122,3008
    fn inv(&self, a: Self::FieldElement) -> Option<Self::FieldElement> {inv127,3130
    fn random_element(&self, rng: &mut ThreadRng) -> Self::FieldElement {random_element136,3362
impl FiniteField for F7 {F7141,3484
    fn characteristic_exponent(&self) -> u32 {characteristic_exponent148,3734
    fn exp(&self, n: u32) -> Self::FieldElement {exp152,3798
    fn log(&self, a: Self::FieldElement) -> Option<u32> {log156,3879
mod test {test166,4057
    fn f7_add() {f7_add170,4099
    fn f7_characteristic() {f7_characteristic184,4509
    fn f7_sub() {f7_sub198,4814
    fn f7_mul() {f7_mul209,5060
    fn f7_neg() {f7_neg227,5683
    fn f7_inv() {f7_inv240,6027

finite_field/f2m.rs,1977
pub struct F2m {F2m9,205
impl PartialEq for F2m {F2m16,324
    fn eq(&self, other: &Self) -> bool {eq17,349
impl FieldTrait for F2m {F2m22,433
    fn generate(order: Self::FieldParameters) -> Self {generate44,1051
    fn zero(&self) -> Self::FieldElement {zero75,1886
    fn one(&self) -> Self::FieldElement {one85,2154
    fn characteristic(&self) -> usize {characteristic95,2413
    fn add(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement {add99,2470
    fn sub(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement {sub103,2579
    fn mul(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement {mul117,3064
    fn neg(&self, a: Self::FieldElement) -> Self::FieldElement {neg141,3757
    fn inv(&self, a: Self::FieldElement) -> Option<Self::FieldElement> {inv145,3839
    fn random_element(&self, rng: &mut ThreadRng) -> Self::FieldElement {random_element154,4086
impl FiniteField for F2m {F2m159,4213
    fn characteristic_exponent(&self) -> u32 {characteristic_exponent166,4494
    fn exp(&self, n: u32) -> Self::FieldElement {exp170,4563
    fn log(&self, a: Self::FieldElement) -> Option<u32> {log174,4649
impl CharacteristicTwo for F2m {}F2m183,4819
impl F2FiniteExtension for F2m {F2m185,4854
    fn elt_to_u32(&self, a: Self::FieldElement) -> u32 {elt_to_u32186,4887
    fn u32_to_elt(&self, n: u32) -> Self::FieldElement {u32_to_elt190,4961
pub fn primitive_poly(order: usize) -> u32 {primitive_poly209,5563
pub fn prime_power(q: u32) -> std::result::Result<(u32, u32), &'static str> {prime_power241,6462
pub fn trial_division(mut n: u32) -> Vec<u32> {trial_division261,7168
mod test {test287,7676
    fn f256_add() {f256_add291,7718
    fn f256_characteristic() {f256_characteristic305,8142
    fn f256_sub() {f256_sub315,8377
    fn f256_mul() {f256_mul325,8629
    fn f256_neg() {f256_neg343,9266
    fn f256_inv() {f256_inv356,9624

finite_field/f2.rs,1443
pub struct F2 {}F29,198
impl FieldTrait for F2 {F211,216
    fn generate(_params: Self::FieldParameters) -> Self {generate19,379
    fn zero(&self) -> Self::FieldElement {zero29,647
    fn one(&self) -> Self::FieldElement {one39,901
    fn characteristic(&self) -> usize {characteristic49,1145
    fn add(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement {add62,1486
    fn sub(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement {sub75,1885
    fn mul(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement {mul88,2293
    fn neg(&self, a: Self::FieldElement) -> Self::FieldElement {neg99,2621
    fn inv(&self, a: Self::FieldElement) -> Option<Self::FieldElement> {inv110,2937
    fn random_element(&self, rng: &mut ThreadRng) -> Self::FieldElement {random_element119,3147
impl FiniteField for F2 {F2124,3258
    fn characteristic_exponent(&self) -> u32 {characteristic_exponent131,3508
    fn exp(&self, _n: u32) -> Self::FieldElement {exp142,3798
    fn log(&self, a: Self::FieldElement) -> Option<u32> {log153,4116
    fn elt_to_str(&self, a: Self::FieldElement) -> String {elt_to_str162,4308
impl CharacteristicTwo for F2 {}F2167,4399
impl F2FiniteExtension for F2 {F2169,4433
    fn elt_to_u32(&self, a: Self::FieldElement) -> u32 {elt_to_u32171,4500
    fn u32_to_elt(&self, n: u32) -> Self::FieldElement {u32_to_elt180,4742

finite_field/mod.rs,1497
    type FieldParameters;FieldParameters16,320
    fn generate(params: Self::FieldParameters) -> Self;generate19,371
    fn zero(&self) -> Self::FieldElement;zero22,479
    fn one(&self) -> Self::FieldElement;one25,579
    fn characteristic(&self) -> usize;characteristic28,658
    fn add(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement;add31,730
    fn sub(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement;sub34,856
    fn mul(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement;mul37,982
    fn neg(&self, a: Self::FieldElement) -> Self::FieldElement;neg40,1117
    fn inv(&self, a: Self::FieldElement) -> Option<Self::FieldElement>;inv43,1235
    fn random_element(&self, rng: &mut ThreadRng) -> Self::FieldElement;random_element46,1354
    fn characteristic_exponent(&self) -> u32;characteristic_exponent51,1532
    fn order(&self) -> usize {order54,1607
    fn exp(&self, n: u32) -> Self::FieldElement;exp59,1764
    fn log(&self, a: Self::FieldElement) -> Option<u32>;log62,1882
    fn elt_to_str(&self, a: Self::FieldElement) -> String {elt_to_str65,2011
    fn elt_to_u32(&self, a: Self::FieldElement) -> u32;elt_to_u3285,2646
    fn u32_to_elt(&self, n: u32) -> Self::FieldElement;u32_to_elt95,2995
    fn to_vec(&self) -> Vec<Self::FieldElement> {to_vec103,3311
pub enum Field<'a, F>Field113,3540
pub mod f2;f2121,3649
pub mod f2m;f2m122,3661
pub mod f7;f7123,3674

lib.rs,214
pub mod crypto;crypto1,0
pub mod finite_field;finite_field2,16
pub mod goppa;goppa3,38
pub mod matrix;matrix4,53
pub mod polynomial;polynomial5,69
fn div_ceil(a: usize, b: usize) -> usize {div_ceil7,90

crypto/io.rs,547
type Result<T> = std::result::Result<T, Box<dyn Error>>;Result18,272
impl PublicKey {PublicKey20,330
    pub fn write(&self, file_name: &str) -> Result<()> {write28,640
    pub fn read_public_key(file_name: &str) -> Result<Self> {read_public_key35,863
    pub fn read_code_dimension(file_name: &str) -> Result<usize> {read_code_dimension44,1196
impl SecretKey {SecretKey53,1443
    pub fn write(&self, file_name: &str) -> Result<()> {write71,2296
    pub fn read_secret_key(file_name: &str) -> Result<Self> {read_secret_key89,2906

crypto/mod.rs,696
pub struct PublicKey {PublicKey20,517
pub struct SecretKey {SecretKey40,1282
pub fn keygen(n: usize, t: usize) -> (PublicKey, SecretKey) {keygen47,1386
impl PublicKey {PublicKey82,2333
    pub fn sgp(&self) -> &Mat<F2> {sgp83,2350
    pub fn t(&self) -> usize {t87,2411
    pub fn encrypt(&self, m: &RowVec<F2>) -> RowVec<F2> {encrypt91,2464
impl SecretKey {SecretKey102,2775
    pub fn s(&self) -> &Mat<F2> {s103,2792
    pub fn goppa(&self) -> &Goppa<F2m> {goppa107,2849
    pub fn info_set(&self) -> &Vec<usize> {info_set111,2917
    pub fn p(&self) -> &Perm {p115,2991
    pub fn decrypt(&self, c: &RowVec<F2>) -> RowVec<F2> {decrypt119,3045
pub mod io;io135,3463

matrix/gauss.rs,1279
impl<F> Mat<F>Mat7,104
    pub fn row_echelon_form(&mut self) -> Vec<usize> {row_echelon_form11,146
    pub fn reduced_row_echelon_form(&mut self) -> Vec<usize> {reduced_row_echelon_form61,1743
    pub fn standard_form(&self) -> Option<(Self, Self, Perm)> {standard_form96,2974
    pub fn standard_parity_check_equivalent(&self) -> (Self, Perm) {standard_parity_check_equivalent171,5738
    pub fn inverse(&self) -> Option<Self> {inverse242,8268
    pub fn invertible_random(field: Field<F>, n: usize) -> Self {invertible_random328,11140
    pub fn remove_redundant_rows(&mut self) {remove_redundant_rows382,12943
    pub fn max_set_of_independant_rows(&mut self) -> Vec<usize> {max_set_of_independant_rows388,13121
    pub fn rank(&self) -> usize {rank392,13226
    pub fn is_invertible(&self) -> bool {is_invertible397,13340
    pub fn is_standard_form(&self) -> bool {is_standard_form401,13448
    pub fn swap_rows(&mut self, row1: usize, row2: usize) {swap_rows424,14030
    pub fn swap_cols(&mut self, col1: usize, col2: usize) {swap_cols437,14537
    pub fn mul_row(&mut self, row: usize, lambda: F::FieldElement) {mul_row446,14774
    pub fn combine_rows(&mut self, row1: usize, lambda: F::FieldElement, row2: usize) {combine_rows453,15021

matrix/io.rs,232
type Result<T> = std::result::Result<T, Box<dyn Error>>;Result8,173
impl Mat<F2> {Mat10,231
    pub fn to_bytes(&self) -> Vec<u8> {to_bytes15,400
    pub fn from_bytes(vec: &[u8]) -> Result<(usize, Self)> {from_bytes43,1284

matrix/traits.rs,3121
impl<F> Clone for Mat<F>Mat10,257
    fn clone(&self) -> Self {clone14,309
impl<F> Add for Mat<F>Mat24,510
    fn add(mut self, other: Self) -> Self::Output {add30,585
impl<F> Add<&Mat<F>> for Mat<F>Add36,683
    fn add(mut self, other: &Self) -> Self::Output {add42,767
impl<F> Add<Mat<F>> for &Mat<F>Add48,865
    fn add(self, mut other: Mat<F>) -> Self::Output {add54,951
impl<F> Add for &Mat<F>Add60,1051
    fn add(self, other: Self) -> Self::Output {add66,1129
impl<F> AddAssign<Mat<F>> for Mat<F>AddAssign73,1256
    fn add_assign(&mut self, other: Self) {add_assign77,1320
impl<F> AddAssign<&Mat<F>> for Mat<F>AddAssign82,1398
    fn add_assign(&mut self, other: &Self) {add_assign86,1463
impl<F> Sub for Mat<F>Mat99,1894
    fn sub(mut self, other: Self) -> Self::Output {sub105,1969
impl<F> Sub<&Mat<F>> for Mat<F>Sub111,2067
    fn sub(mut self, other: &Self) -> Self::Output {sub117,2151
impl<F> Sub<Mat<F>> for &Mat<F>Sub123,2249
    fn sub(self, mut other: Mat<F>) -> Self::Output {sub129,2335
impl<F> Sub for &Mat<F>Sub135,2435
    fn sub(self, other: Self) -> Self::Output {sub141,2513
impl<F> SubAssign<Mat<F>> for Mat<F>SubAssign148,2643
    fn sub_assign(&mut self, other: Self) {sub_assign152,2707
impl<F> SubAssign<&Mat<F>> for Mat<F>SubAssign157,2785
    fn sub_assign(&mut self, other: &Self) {sub_assign161,2850
impl<F> Mul for Mat<F>Mat174,3293
    fn mul(self, other: Self) -> Self::Output {mul180,3368
impl<F> Mul<&Mat<F>> for Mat<F>Mul185,3448
    fn mul(self, other: &Self) -> Self::Output {mul191,3532
impl<F> Mul<Mat<F>> for &Mat<F>Mul196,3612
    fn mul(self, other: Mat<F>) -> Self::Output {mul202,3698
impl<F> Mul for &Mat<F>Mul207,3779
    fn mul(self, other: Self) -> Self::Output {mul213,3857
impl<F> MulAssign<Mat<F>> for Mat<F>MulAssign233,4506
    fn mul_assign(&mut self, other: Self) {mul_assign237,4570
impl<F> MulAssign<&Mat<F>> for Mat<F>MulAssign242,4648
    fn mul_assign(&mut self, other: &Self) {mul_assign246,4713
impl<F> Mul<Perm> for Mat<F>Mat266,5370
    fn mul(self, other: Perm) -> Self::Output {mul272,5451
impl<F> Mul<&Perm> for Mat<F>Mat277,5531
    fn mul(self, other: &Perm) -> Self::Output {mul283,5613
impl<F> Mul<Perm> for &Mat<F>Mul288,5693
    fn mul(self, other: Perm) -> Self::Output {mul294,5777
impl<F> Mul<&Perm> for &Mat<F>Mul299,5856
    fn mul(self, perm: &Perm) -> Self::Output {mul305,5941
impl<F> Neg for Mat<F>Mat313,6158
    fn neg(mut self) -> Self::Output {neg319,6233
impl<F> Neg for &Mat<F>Neg327,6405
    fn neg(self) -> Self::Output {neg333,6483
impl<F> Index<(usize, usize)> for Mat<F>Mat343,6731
    fn index(&self, index: (usize, usize)) -> &Self::Output {index349,6835
impl<F> IndexMut<(usize, usize)> for Mat<F>Mat354,6956
    fn index_mut(&mut self, index: (usize, usize)) -> &mut Self::Output {index_mut358,7027
impl<F> Debug for Mat<F>Mat363,7164
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {fmt367,7223
impl<F> Display for Mat<F>Mat387,7794
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {fmt391,7849

matrix/perm.rs,736
pub struct Perm(Vec<usize>);Perm5,81
impl Index<usize> for Perm {Perm7,111
    fn index(&self, index: usize) -> &Self::Output {index10,166
impl IndexMut<usize> for Perm {Perm15,251
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {index_mut16,283
impl Perm {Perm21,384
    pub fn new(vec: Vec<usize>) -> Self {new32,713
    pub fn random(n: usize) -> Self {random48,1134
    pub fn identity(n: usize) -> Self {identity64,1539
    pub fn len(&self) -> usize {len72,1708
    pub fn data(&self) -> &Vec<usize> {data76,1769
    pub fn swap(&mut self, i: usize, j: usize) {swap80,1832
    pub fn inverse(&self) -> Self {inverse84,1915
    pub fn is_permutation(&self) -> bool {is_permutation92,2092

matrix/mod.rs,1162
pub struct Mat<F>Mat12,225
impl<F> Mat<F>Mat22,357
    pub fn new(field: Field<F>, rows: usize, cols: usize, data: Vec<F::FieldElement>) -> Self {new33,628
    pub fn zero(field: Field<F>, rows: usize, cols: usize) -> Self {zero56,1358
    pub fn field(&self) -> &Rc<F> {field73,1816
    pub fn rows(&self) -> usize {rows77,1879
    pub fn cols(&self) -> usize {cols81,1938
    pub fn data(&self) -> &Vec<F::FieldElement> {data85,1997
    pub fn random(field: Field<F>, n: usize, m: usize) -> Self {random89,2073
    pub fn is_zero(&self) -> bool {is_zero100,2388
    pub fn extract_cols(&self, cols: &Vec<usize>) -> Self {extract_cols112,2720
    pub fn identity(field: Field<F>, n: usize) -> Self {identity122,3028
    pub fn transpose(&self) -> Self {transpose130,3224
    pub fn keep_rows(&mut self, rows: &Vec<usize>) {keep_rows145,3639
    pub fn remove_rows(&mut self, rows: &Vec<usize>) {remove_rows168,4419
    pub fn binary(&self, field: Field<F2>) -> Mat<F2>binary183,4979
pub mod gauss;gauss202,5518
pub mod io;io203,5533
pub mod perm;perm204,5545
pub mod rowvec;rowvec205,5559
pub mod traits;traits206,5575

matrix/rowvec/io.rs,257
type Result<T> = std::result::Result<T, Box<dyn Error>>;Result13,228
impl RowVec<F2> {RowVec15,286
    pub fn write(&self, file_name: &str) -> Result<()> {write16,304
    pub fn read_vector(file_name: &str) -> Result<RowVec<F2>> {read_vector40,1018

matrix/rowvec/traits.rs,3227
impl<F> Clone for RowVec<F>RowVec9,246
    fn clone(&self) -> Self {clone13,301
impl<F> Add for RowVec<F>RowVec18,371
    fn add(self, other: Self) -> Self::Output {add24,449
impl<F> Add<&RowVec<F>> for RowVec<F>Add29,528
    fn add(self, other: &Self) -> Self::Output {add35,618
impl<F> Add<RowVec<F>> for &RowVec<F>Add40,710
    fn add(self, other: RowVec<F>) -> Self::Output {add46,805
impl<F> Add for &RowVec<F>Add51,889
    fn add(self, other: Self) -> Self::Output {add57,973
impl<F> AddAssign<RowVec<F>> for RowVec<F>AddAssign62,1065
    fn add_assign(&mut self, other: Self) {add_assign66,1135
impl<F> AddAssign<&RowVec<F>> for RowVec<F>AddAssign71,1213
    fn add_assign(&mut self, other: &Self) {add_assign75,1284
impl<F> Sub for RowVec<F>RowVec80,1366
    fn sub(self, other: Self) -> Self::Output {sub86,1444
impl<F> Sub<&RowVec<F>> for RowVec<F>Sub91,1523
    fn sub(self, other: &Self) -> Self::Output {sub97,1613
impl<F> Sub<RowVec<F>> for &RowVec<F>Sub102,1705
    fn sub(self, other: RowVec<F>) -> Self::Output {sub108,1800
impl<F> Sub for &RowVec<F>Sub113,1884
    fn sub(self, other: Self) -> Self::Output {sub119,1968
impl<F> SubAssign<RowVec<F>> for RowVec<F>SubAssign124,2060
    fn sub_assign(&mut self, other: Self) {sub_assign128,2130
impl<F> SubAssign<&RowVec<F>> for RowVec<F>SubAssign133,2208
    fn sub_assign(&mut self, other: &Self) {sub_assign137,2279
impl<F> Mul<Mat<F>> for RowVec<F>Mul142,2361
    fn mul(self, other: Mat<F>) -> Self::Output {mul148,2447
impl<F> Mul<&Mat<F>> for RowVec<F>Mul153,2529
    fn mul(self, other: &Mat<F>) -> Self::Output {mul159,2616
impl<F> Mul<Mat<F>> for &RowVec<F>Mul164,2698
    fn mul(self, other: Mat<F>) -> Self::Output {mul170,2790
impl<F> Mul<&Mat<F>> for &RowVec<F>Mul175,2871
    fn mul(self, other: &Mat<F>) -> Self::Output {mul181,2964
impl<F> MulAssign<Mat<F>> for RowVec<F>MulAssign186,3056
    fn mul_assign(&mut self, other: Mat<F>) {mul_assign190,3123
impl<F> MulAssign<&Mat<F>> for RowVec<F>MulAssign195,3203
    fn mul_assign(&mut self, other: &Mat<F>) {mul_assign199,3271
impl<F> Mul<Perm> for RowVec<F>RowVec204,3352
    fn mul(self, other: Perm) -> Self::Output {mul210,3436
impl<F> Mul<&Perm> for RowVec<F>RowVec215,3516
    fn mul(self, other: &Perm) -> Self::Output {mul221,3601
impl<F> Mul<Perm> for &RowVec<F>Mul226,3681
    fn mul(self, other: Perm) -> Self::Output {mul232,3771
impl<F> Mul<&Perm> for &RowVec<F>Mul237,3850
    fn mul(self, other: &Perm) -> Self::Output {mul243,3941
impl<F> Neg for RowVec<F>RowVec248,4039
    fn neg(self) -> Self::Output {neg254,4117
impl<F> Neg for &RowVec<F>Neg259,4185
    fn neg(self) -> Self::Output {neg265,4269
impl<F> Index<usize> for RowVec<F>RowVec270,4338
    fn index(&self, index: usize) -> &Self::Output {index276,4436
impl<F> IndexMut<usize> for RowVec<F>RowVec281,4526
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {index_mut285,4591
impl<F> Debug for RowVec<F>RowVec290,4697
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {fmt294,4759
impl<F> Display for RowVec<F>RowVec299,4855
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {fmt303,4913

matrix/rowvec/mod.rs,894
pub struct RowVec<F>(Mat<F>)RowVec8,129
impl<F> RowVec<F>RowVec12,184
    pub fn new(field: Field<F>, data: Vec<F::FieldElement>) -> Self {new16,229
    pub fn zero(field: Field<F>, cols: usize) -> Self {zero20,359
    pub fn field(&self) -> &Rc<F> {field24,464
    pub fn rows(&self) -> usize {rows28,530
    pub fn cols(&self) -> usize {cols32,581
    pub fn data(&self) -> &Vec<F::FieldElement> {data36,644
    pub fn weight(&self) -> usize {weight40,723
    pub fn random(field: Field<F>, n: usize) -> Self {random50,944
    pub fn random_with_weight(field: Field<F>, n: usize, w: usize) -> Self {random_with_weight54,1047
    pub fn transpose(&self) -> Mat<F> {transpose77,1710
    pub fn is_zero(&self) -> bool {is_zero81,1784
    pub fn extract_cols(&self, perm: &Vec<usize>) -> Self {extract_cols90,1976
pub mod io;io95,2087
pub mod traits;traits96,2099
