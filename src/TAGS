
polynomial/traits.rs,3432
impl<'a, F: Eq + Field> PartialEq for Poly<'a, F> {Poly10,235
    fn eq(&self, other: &Self) -> bool {eq11,287
impl<'a, F: Eq + Field> Clone for Poly<'a, F> {Poly24,591
    fn clone(&self) -> Self {clone25,639
impl<'a, F: Eq + Field> Add for Poly<'a, F> {Poly33,790
    fn add(self, other: Self) -> Self::Output {add36,861
impl<'a, F: Eq + Field> Add<&Poly<'a, F>> for Poly<'a, F> {Add41,941
    fn add(self, other: &Self) -> Self::Output {add44,1026
impl<'a, F: Eq + Field> Add<Poly<'a, F>> for &Poly<'a, F> {Add49,1106
    fn add(self, other: Poly<'a, F>) -> Self::Output {add52,1198
impl<'a, F: Eq + Field> Add for &Poly<'a, F> {Add57,1284
    fn add(self, other: Self) -> Self::Output {add60,1363
impl<'a, F: Eq + Field> AddAssign<Poly<'a, F>> for Poly<'a, F> {AddAssign67,1490
    fn add_assign(&mut self, other: Self) {add_assign68,1555
impl<'a, F: Eq + Field> AddAssign<&Poly<'a, F>> for Poly<'a, F> {AddAssign73,1633
    fn add_assign(&mut self, other: &Self) {add_assign74,1699
impl<'a, F: Eq + Field> Sub for Poly<'a, F> {Poly87,2003
    fn sub(self, other: Self) -> Self::Output {sub90,2074
impl<'a, F: Eq + Field> Sub<&Poly<'a, F>> for Poly<'a, F> {Sub95,2154
    fn sub(self, other: &Self) -> Self::Output {sub98,2239
impl<'a, F: Eq + Field> Sub<Poly<'a, F>> for &Poly<'a, F> {Sub103,2319
    fn sub(self, other: Poly<'a, F>) -> Self::Output {sub106,2411
impl<'a, F: Eq + Field> Sub for &Poly<'a, F> {Sub111,2497
    fn sub(self, other: Self) -> Self::Output {sub114,2576
impl<'a, F: Eq + Field> SubAssign<Poly<'a, F>> for Poly<'a, F> {SubAssign121,2706
    fn sub_assign(&mut self, other: Self) {sub_assign122,2771
impl<'a, F: Eq + Field> SubAssign<&Poly<'a, F>> for Poly<'a, F> {SubAssign127,2849
    fn sub_assign(&mut self, other: &Self) {sub_assign128,2915
impl<'a, F: Eq + Field> Mul for Poly<'a, F> {Poly141,3219
    fn mul(self, other: Self) -> Self::Output {mul144,3290
impl<'a, F: Eq + Field> Mul<&Poly<'a, F>> for Poly<'a, F> {Mul149,3370
    fn mul(self, other: &Self) -> Self::Output {mul152,3455
impl<'a, F: Eq + Field> Mul<Poly<'a, F>> for &Poly<'a, F> {Mul157,3535
    fn mul(self, other: Poly<'a, F>) -> Self::Output {mul160,3627
impl<'a, F: Eq + Field> Mul for &Poly<'a, F> {Mul165,3713
    fn mul(self, other: Self) -> Self::Output {mul168,3792
impl<'a, F: Eq + Field> MulAssign<Poly<'a, F>> for Poly<'a, F> {MulAssign183,4178
    fn mul_assign(&mut self, other: Self) {mul_assign184,4243
impl<'a, F: Eq + Field> MulAssign<&Poly<'a, F>> for Poly<'a, F> {MulAssign189,4321
    fn mul_assign(&mut self, other: &Self) {mul_assign190,4387
impl<'a, F: Eq + Field> Neg for Poly<'a, F> {Poly207,4858
    fn neg(self) -> Self::Output {neg210,4929
impl<'a, F: Eq + Field> Neg for &Poly<'a, F> {Neg215,4988
    fn neg(self) -> Self::Output {neg218,5067
impl<'a, F: Eq + Field> Index<usize> for Poly<'a, F> {Poly229,5295
    fn index(&self, index: usize) -> &Self::Output {index232,5378
impl<'a, F: Eq + Field> IndexMut<usize> for Poly<'a, F> {Poly237,5466
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {index_mut238,5524
impl<'a, F: Eq + F2FiniteExtension> Debug for Poly<'a, F> {Poly243,5628
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {fmt244,5688
impl<'a, F: Eq + FiniteField> Display for Poly<'a, F> {Poly270,6395
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {fmt271,6451

polynomial/characteristic_two.rs,1059
type Result<T> = std::result::Result<T, Box<dyn Error>>;Result7,161
impl<'a, F: CharacteristicTwo + Eq + Field> Poly<'a, F> {Poly9,219
    pub fn random_monic_irreducible(rng: &mut ThreadRng, f: &'a F, degree: usize) -> Selfrandom_monic_irreducible10,277
    pub fn square(&mut self) {square27,720
    pub fn square_root_modulo(&mut self, modulus: &Self)square_root_modulo39,1045
    pub fn inverse_modulo_by_fast_exponentiation(&mut self, modulus: &Self)inverse_modulo_by_fast_exponentiation54,1460
    pub fn pow_modulo(&mut self, mut n: u32, modulus: &Self) {pow_modulo77,2148
    pub fn is_irreducible(&self) -> boolis_irreducible100,2775
    pub(crate) fn goppa_extended_gcd(g: &Self, t: &Self) -> (Self, Self) {goppa_extended_gcd135,3717
impl<'a, F: Eq + F2FiniteExtension> Poly<'a, F> {Poly163,4459
    pub fn to_hex_string(&self) -> String {to_hex_string164,4509
    pub fn from_hex_string(s: &str, f: &'a F) -> Result<Self> {from_hex_string182,5260
mod tests {tests195,5670
    fn is_irreducible() {is_irreducible200,5753

polynomial/mod.rs,1263
pub struct Poly<'a, F: Eq + Field> {Poly9,149
impl<'a, F: Eq + Field> Poly<'a, F> {Poly14,231
    pub fn new(field: &'a F, data: Vec<F::FElt>) -> Self {new20,411
    pub fn zero(field: &'a F, len: usize) -> Self {zero34,769
    pub fn x_n(field: &'a F, n: usize) -> Self {x_n45,1065
    pub fn support(f: &'a F, support: &[usize]) -> Self {support57,1407
    pub fn field(&self) -> &'a F {field75,1864
    pub fn degree(&self) -> usize {degree79,1925
    pub fn is_zero(&self) -> bool {is_zero87,2129
    fn update_len(&mut self) {update_len92,2307
    pub fn random(rng: &mut ThreadRng, f: &'a F, degree: usize) -> Self {random97,2455
    pub fn eval(&self, point: F::FElt) -> F::FElt {eval109,2807
    pub fn euclidean_division(a: &Self, b: &Self) -> (Self, Self) {euclidean_division123,3228
    pub fn modulo(&mut self, modulus: &Self) {modulo153,4207
    pub fn gcd(a: &Self, b: &Self) -> Self {gcd170,4764
    pub fn neg_mut(&mut self) {neg_mut182,5074
    pub fn extended_gcd(a: &Self, b: &Self) -> (Self, Self, Self, Self, Self) {extended_gcd192,5361
    pub fn inverse_modulo(&self, modulus: &Self) -> Self {inverse_modulo235,6558
pub mod traits;traits249,6953
pub mod characteristic_two;characteristic_two250,6969

goppa.rs,2569
type Result<T> = result::Result<T, Box<dyn Error>>;Result18,291
pub struct Goppa<'a, F: Eq + Field> {Goppa22,403
impl<'a, F> Debug for Goppa<'a, F>Goppa27,490
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {fmt31,564
impl<'a, F> Display for Goppa<'a, F>Goppa54,1244
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {fmt58,1320
impl<'a, F> Goppa<'a, F>Goppa81,1994
    pub fn new(poly: Poly<'a, F>, set: Vec<F::FElt>) -> Self {new99,2633
    pub fn random(rng: &mut ThreadRng, f: &'a F, n: usize, t: usize) -> Self {random127,3771
    pub fn len(&self) -> usize {len159,4914
    pub fn poly(&self) -> &Poly<'a, F> {poly163,4977
    pub fn set(&self) -> &Vec<F::FElt> {set167,5044
    pub fn field(&self) -> &'a F {field171,5110
    pub fn parity_check_x(&self) -> Mat<'a, F> {parity_check_x175,5178
    pub fn parity_check_y(&self) -> Mat<'a, F> {parity_check_y187,5480
    pub fn parity_check_z(&self) -> Mat<'a, F> {parity_check_z205,5918
    pub fn parity_check_xyz(&self) -> Mat<'a, F> {parity_check_xyz216,6186
    pub fn parity_check_from_xyz<'b>(xyz: &Mat<'a, F>, f2: &'b F2) -> Mat<'b, F2> {parity_check_from_xyz223,6379
    pub fn parity_check_matrix<'b>(&self, f2: &'b F2) -> Mat<'b, F2> {parity_check_matrix229,6551
    pub fn generator_from_xyz<'b>(xyz: &Mat<'a, F>, f2: &'b F2) -> (Mat<'b, F2>, Vec<usize>) {generator_from_xyz234,6718
    pub fn generator_from_parity_check_standard<'b>(h: &Mat<'b, F2>) -> Mat<'b, F2> {generator_from_parity_check_standard243,7122
    pub fn generator_from_parity_check<'b>(h: &Mat<'b, F2>) -> (Mat<'b, F2>, Vec<usize>) {generator_from_parity_check257,7511
    pub fn generator_matrix<'b>(&self, f2: &'b F2) -> Mat<'b, F2> {generator_matrix266,7896
    pub fn syndrome<'b>(&self, r: &RowVec<'b, F2>) -> Mat<'a, F> {syndrome271,8059
    pub fn syndrome_from_xyz<'b>(xyz: &Mat<'a, F>, r: &RowVec<'b, F2>) -> Mat<'a, F> {syndrome_from_xyz276,8217
    pub fn encode<'b>(&self, msg: &RowVec<'b, F2>) -> RowVec<'b, F2> {encode290,8638
    pub fn g_encode<'b>(g: &Mat<'b, F2>, msg: &RowVec<'b, F2>) -> RowVec<'b, F2> {g_encode296,8821
    pub fn decode<'b>(&self, rcv: &RowVec<'b, F2>) -> RowVec<'b, F2> {decode300,8927
    pub fn xyz_decode<'b>(&self, xyz: &Mat<'a, F>, rcv: &RowVec<'b, F2>) -> RowVec<'b, F2> {xyz_decode305,9083
impl<'a, F: Eq + F2FiniteExtension> Goppa<'a, F> {Goppa358,10567
    pub fn to_hex_string(&self) -> String {to_hex_string359,10618
    pub fn from_hex_string(s: &str, f: &'a F) -> Result<Self> {from_hex_string386,11430

main.rs,1864
// const GOPPA_N_MIN: u32 = 4;GOPPA_N_MIN16,250
// const GOPPA_N_MAX: u32 = 1024;GOPPA_N_MAX17,281
// const GOPPA_N: u32 = 1024; // Code lengthGOPPA_N18,315
// const GOPPA_T: u32 = 50; // Code correction capacityGOPPA_T19,360
// const GOPPA_K: u32 = 524; // Code dimensionGOPPA_K20,416
// const GOPPA_N_MIN: u32 = 4;GOPPA_N_MIN22,464
// const GOPPA_N_MAX: u32 = 2048;GOPPA_N_MAX23,495
// const GOPPA_N: u32 = 2048; // Code lengthGOPPA_N24,529
// const GOPPA_T: u32 = 70; // Code correction capacityGOPPA_T25,574
// // const GOPPA_K: u32 = 1278; // Code dimensionGOPPA_K26,630
const GOPPA_N_MIN: u32 = 4; // TODO: 4 or 5 ?GOPPA_N_MIN28,682
const GOPPA_N_MAX: u32 = 4096;GOPPA_N_MAX29,728
const GOPPA_N: u32 = 4096; // Code lengthGOPPA_N30,759
const GOPPA_T: u32 = 170; // Code correction capacityGOPPA_T31,801
                          // const GOPPA_K: u32 = 2056; // Code dimensionGOPPA_K32,855
const PLAINTEXT: &str = "plaintext.mce";PLAINTEXT34,930
const CIPHERTEXT: &str = "ciphertext.mce";CIPHERTEXT35,971
const DECRYPTED: &str = "decrypted.mce";DECRYPTED36,1014
const PUBLIC_KEY: &str = "public_key.mce";PUBLIC_KEY37,1055
const SECRET_KEY: &str = "secret_key.mce";SECRET_KEY38,1098
fn get_program(path: &str) -> &str {get_program40,1142
fn print_help(program: &str, opts: Options) {print_help48,1293
fn keygen(pk_file: &str, sk_file: &str, n: u32, t: u32, verbose: bool) -> Result<(), MainError> {keygen60,1684
fn encrypt(encrypt90,2414
fn decrypt(sk_file: &str, ctxt_file: &str, dec_file: &str, verbose: bool) -> Result<(), MainError> {decrypt131,3396
fn plaintext(pk_file: &str, ptxt_file: &str, verbose: bool) -> Result<(), MainError> {plaintext173,4551
fn get_code_params(matches: &Matches) -> Result<(u32, u32), MainError> {get_code_params200,5258
fn main() -> Result<(), MainError> {main228,6188

finite_field/f7.rs,1418
const ORDER: u32 = 7;ORDER8,118
const EXP: [F7Elt; ORDER as usize] = [1, 3, 2, 6, 4, 5, 1];EXP10,141
const LOG: [u32; ORDER as usize] = [ORDER as u32, 0, 2, 1, 4, 5, 3];LOG12,202
pub struct F7 {}F719,348
impl PartialEq for F7 {F721,366
    fn eq(&self, _other: &Self) -> bool {eq22,390
impl Field for F7 {F727,454
    fn zero(&self) -> Self::FElt {zero36,682
    fn one(&self) -> Self::FElt {one46,923
    fn characteristic(&self) -> u32 {characteristic56,1154
    fn add(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt {add69,1492
    fn sub(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt {sub82,1872
    fn mul(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt {mul86,1975
    fn neg(&self, a: Self::FElt) -> Self::FElt {neg111,2619
    fn inv(&self, a: Self::FElt) -> Option<Self::FElt> {inv115,2703
    fn random_element(&self, rng: &mut ThreadRng) -> Self::FElt {random_element123,2893
impl FiniteField for F7 {F7128,3000
    fn characteristic_exponent(&self) -> u32 {characteristic_exponent135,3250
    fn exp(&self, n: u32) -> Self::FElt {exp139,3314
    fn log(&self, a: Self::FElt) -> Option<u32> {log143,3387
mod test {test153,3557
    fn f7_add() {f7_add157,3599
    fn f7_characteristic() {f7_characteristic171,4009
    fn f7_sub() {f7_sub185,4314
    fn f7_mul() {f7_mul196,4560
    fn f7_neg() {f7_neg214,5183
    fn f7_inv() {f7_inv227,5527

finite_field/f2m.rs,1818
pub struct F2m {F2m9,200
impl PartialEq for F2m {F2m16,304
    fn eq(&self, other: &Self) -> bool {eq17,329
impl Field for F2m {F2m22,413
    fn zero(&self) -> Self::FElt {zero31,658
    fn one(&self) -> Self::FElt {one41,913
    fn characteristic(&self) -> u32 {characteristic51,1159
    fn add(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt {add55,1214
    fn sub(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt {sub59,1299
    fn mul(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt {mul73,1755
    fn neg(&self, a: Self::FElt) -> Self::FElt {neg96,2402
    fn inv(&self, a: Self::FElt) -> Option<Self::FElt> {inv100,2468
    fn random_element(&self, rng: &mut ThreadRng) -> Self::FElt {random_element108,2673
impl FiniteField for F2m {F2m113,2785
    fn characteristic_exponent(&self) -> u32 {characteristic_exponent120,3054
    fn exp(&self, n: u32) -> Self::FElt {exp124,3123
    fn log(&self, a: Self::FElt) -> Option<u32> {log128,3201
impl CharacteristicTwo for F2m {}F2m137,3363
impl F2FiniteExtension for F2m {F2m139,3398
    fn elt_to_u32(&self, a: Self::FElt) -> u32 {elt_to_u32140,3431
    fn u32_to_elt(&self, n: u32) -> Self::FElt {u32_to_elt144,3497
impl F2m {F2m152,3666
    pub fn generate(order: u32) -> Self {generate168,4130
    pub fn primitive_poly(order: u32) -> u32 {primitive_poly204,5222
pub fn prime_power(q: u32) -> std::result::Result<(u32, u32), &'static str> {prime_power237,6206
pub fn trial_division(mut n: u32) -> Vec<u32> {trial_division257,6912
mod test {test283,7420
    fn f256_add() {f256_add287,7462
    fn f256_characteristic() {f256_characteristic301,7886
    fn f256_sub() {f256_sub311,8121
    fn f256_mul() {f256_mul321,8373
    fn f256_neg() {f256_neg339,9010
    fn f256_inv() {f256_inv352,9368

finite_field/f2.rs,1193
pub struct F2 {}F29,193
impl Field for F2 {F211,211
    fn zero(&self) -> Self::FElt {zero20,437
    fn one(&self) -> Self::FElt {one30,678
    fn characteristic(&self) -> u32 {characteristic40,909
    fn add(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt {add53,1243
    fn sub(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt {sub66,1613
    fn mul(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt {mul79,1992
    fn neg(&self, a: Self::FElt) -> Self::FElt {neg90,2291
    fn inv(&self, a: Self::FElt) -> Option<Self::FElt> {inv101,2590
    fn random_element(&self, rng: &mut ThreadRng) -> Self::FElt {random_element110,2784
impl FiniteField for F2 {F2115,2887
    fn characteristic_exponent(&self) -> u32 {characteristic_exponent122,3137
    fn exp(&self, _n: u32) -> Self::FElt {exp133,3427
    fn log(&self, a: Self::FElt) -> Option<u32> {log144,3737
    fn elt_to_str(&self, a: Self::FElt) -> String {elt_to_str153,3921
impl CharacteristicTwo for F2 {}F2158,4004
impl F2FiniteExtension for F2 {F2160,4038
    fn elt_to_u32(&self, a: Self::FElt) -> u32 {elt_to_u32162,4105
    fn u32_to_elt(&self, n: u32) -> Self::FElt {u32_to_elt171,4339

finite_field/mod.rs,1125
pub trait Field {Field9,118
    fn zero(&self) -> Self::FElt;zero14,236
    fn one(&self) -> Self::FElt;one17,328
    fn characteristic(&self) -> u32;characteristic20,399
    fn add(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt;add23,469
    fn sub(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt;sub26,571
    fn mul(&self, a: Self::FElt, b: Self::FElt) -> Self::FElt;mul29,673
    fn neg(&self, a: Self::FElt) -> Self::FElt;neg32,784
    fn inv(&self, a: Self::FElt) -> Option<Self::FElt>;inv35,886
    fn random_element(&self, rng: &mut ThreadRng) -> Self::FElt;random_element38,989
    fn characteristic_exponent(&self) -> u32;characteristic_exponent44,1155
    fn order(&self) -> u32 {order47,1230
    fn exp(&self, n: u32) -> Self::FElt;exp52,1385
    fn log(&self, a: Self::FElt) -> Option<u32>;log55,1495
    fn elt_to_str(&self, a: Self::FElt) -> String {elt_to_str58,1616
    fn elt_to_u32(&self, a: Self::FElt) -> u32;elt_to_u3278,2238
    fn u32_to_elt(&self, n: u32) -> Self::FElt;u32_to_elt88,2579
pub mod f2;f291,2630
pub mod f2m;f2m92,2642
pub mod f7;f793,2655

lib.rs,157
pub mod crypto;crypto1,0
pub mod finite_field;finite_field2,16
pub mod goppa;goppa3,38
pub mod matrix;matrix4,53
pub mod polynomial;polynomial5,69

matrix/gauss.rs,1286
impl<'a, F: Eq + Field> Mat<'a, F> {Mat5,67
    pub fn swap_rows(&mut self, row1: usize, row2: usize) {swap_rows6,104
    pub fn swap_cols(&mut self, col1: usize, col2: usize) {swap_cols19,611
    pub fn combine_rows(&mut self, row1: usize, lambda: F::FElt, row2: usize) {combine_rows31,957
    pub fn mul_row(&mut self, row: usize, lambda: F::FElt) {mul_row38,1200
    pub fn inverse(&self) -> Option<Self> {inverse47,1506
    pub fn invertible_random(rng: &mut ThreadRng, f: &'a F, n: usize) -> Self {invertible_random133,4363
    pub fn row_echelon_form(&mut self) -> Vec<usize> {row_echelon_form179,5943
    pub fn reduced_row_echelon_form(&mut self) -> Vec<usize> {reduced_row_echelon_form229,7528
    pub fn rank(&self) -> usize {rank262,8619
    pub fn max_set_of_independant_rows(&mut self) -> Vec<usize> {max_set_of_independant_rows267,8733
    pub fn is_invertible(&self) -> bool {is_invertible271,8838
    pub fn standard_form(&self) -> Option<(Self, Self, Perm)> {standard_form277,9074
    pub fn standard_parity_check_equivalent(&self) -> (Self, Perm) {standard_parity_check_equivalent352,11823
    pub fn is_standard_form(&self) -> bool {is_standard_form420,14224
    pub fn remove_redundant_rows(&mut self) {remove_redundant_rows443,14804

matrix/traits.rs,3868
fn div_ceil(a: u32, b: u32) -> u32 {div_ceil9,229
impl<'a, F: Eq + Field> Clone for Mat<'a, F> {Mat13,312
    fn clone(&self) -> Self {clone14,359
impl<'a, F: Eq + Field> Add for Mat<'a, F> {Mat24,567
    fn add(self, other: Self) -> Self::Output {add27,637
impl<'a, F: Eq + Field> Add<&Mat<'a, F>> for Mat<'a, F> {Add32,717
    fn add(self, other: &Self) -> Self::Output {add35,800
impl<'a, F: Eq + Field> Add<Mat<'a, F>> for &Mat<'a, F> {Add40,880
    fn add(self, other: Mat<'a, F>) -> Self::Output {add43,969
impl<'a, F: Eq + Field> Add for &Mat<'a, F> {Add48,1054
    fn add(self, other: Self) -> Self::Output {add51,1131
impl<'a, F: Eq + Field> AddAssign<Mat<'a, F>> for Mat<'a, F> {AddAssign67,1644
    fn add_assign(&mut self, other: Self) {add_assign68,1707
impl<'a, F: Eq + Field> AddAssign<&Mat<'a, F>> for Mat<'a, F> {AddAssign73,1785
    fn add_assign(&mut self, other: &Self) {add_assign74,1849
impl<'a, F: Eq + Field> Sub for Mat<'a, F> {Mat88,2290
    fn sub(self, other: Self) -> Self::Output {sub91,2360
impl<'a, F: Eq + Field> Sub<&Mat<'a, F>> for Mat<'a, F> {Sub96,2440
    fn sub(self, other: &Self) -> Self::Output {sub99,2523
impl<'a, F: Eq + Field> Sub<Mat<'a, F>> for &Mat<'a, F> {Sub104,2603
    fn sub(self, other: Mat<'a, F>) -> Self::Output {sub107,2692
impl<'a, F: Eq + Field> Sub for &Mat<'a, F> {Sub112,2777
    fn sub(self, other: Self) -> Self::Output {sub115,2854
impl<'a, F: Eq + Field> SubAssign<Mat<'a, F>> for Mat<'a, F> {SubAssign131,3382
    fn sub_assign(&mut self, other: Self) {sub_assign132,3445
impl<'a, F: Eq + Field> SubAssign<&Mat<'a, F>> for Mat<'a, F> {SubAssign137,3523
    fn sub_assign(&mut self, other: &Self) {sub_assign138,3587
impl<'a, F: Eq + Field> Mul for Mat<'a, F> {Mat152,4040
    fn mul(self, other: Self) -> Self::Output {mul155,4110
impl<'a, F: Eq + Field> Mul<&Mat<'a, F>> for Mat<'a, F> {Mul160,4190
    fn mul(self, other: &Self) -> Self::Output {mul163,4273
impl<'a, F: Eq + Field> Mul<Mat<'a, F>> for &Mat<'a, F> {Mul168,4353
    fn mul(self, other: Mat<'a, F>) -> Self::Output {mul171,4442
impl<'a, F: Eq + Field> Mul for &Mat<'a, F> {Mul176,4527
    fn mul(self, other: Self) -> Self::Output {mul179,4604
impl<'a, F: Eq + Field> MulAssign<Mat<'a, F>> for Mat<'a, F> {MulAssign199,5229
    fn mul_assign(&mut self, other: Self) {mul_assign200,5292
impl<'a, F: Eq + Field> MulAssign<&Mat<'a, F>> for Mat<'a, F> {MulAssign205,5370
    fn mul_assign(&mut self, other: &Self) {mul_assign206,5434
impl<'a, F: Eq + Field> Mul<Perm> for Mat<'a, F> {Mat226,6081
    fn mul(self, other: Perm) -> Self::Output {mul229,6157
impl<'a, F: Eq + Field> Mul<&Perm> for Mat<'a, F> {Mat234,6237
    fn mul(self, other: &Perm) -> Self::Output {mul237,6314
impl<'a, F: Eq + Field> Mul<Perm> for &Mat<'a, F> {Mul242,6394
    fn mul(self, other: Perm) -> Self::Output {mul245,6477
impl<'a, F: Eq + Field> Mul<&Perm> for &Mat<'a, F> {Mul250,6556
    fn mul(self, perm: &Perm) -> Self::Output {mul253,6640
impl<'a, F: Eq + Field> Neg for Mat<'a, F> {Mat261,6857
    fn neg(self) -> Self::Output {neg264,6927
impl<'a, F: Eq + Field> Neg for &Mat<'a, F> {Neg269,6986
    fn neg(self) -> Self::Output {neg272,7063
impl<'a, F: Eq + Field> Index<(usize, usize)> for Mat<'a, F> {Mat283,7307
    fn index(&self, index: (usize, usize)) -> &Self::Output {index286,7398
impl<'a, F: Eq + Field> IndexMut<(usize, usize)> for Mat<'a, F> {Mat291,7519
    fn index_mut(&mut self, index: (usize, usize)) -> &mut Self::Output {index_mut292,7585
impl<'a, F: Eq + F2FiniteExtension> Debug for Mat<'a, F> {Mat297,7722
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {fmt298,7781
impl<'a, F: Eq + FiniteField> Display for Mat<'a, F> {Mat318,8364
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {fmt319,8419

matrix/perm.rs,758
pub struct Perm(Vec<usize>);Perm5,100
impl Index<usize> for Perm {Perm7,130
    fn index(&self, index: usize) -> &Self::Output {index10,185
impl IndexMut<usize> for Perm {Perm15,270
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {index_mut16,302
impl Perm {Perm21,403
    pub fn new(vec: Vec<usize>) -> Self {new32,732
    pub fn random(rng: &mut ThreadRng, n: usize) -> Self {random48,1153
    pub fn identity(n: usize) -> Self {identity63,1537
    pub fn len(&self) -> usize {len71,1710
    pub fn data(&self) -> &Vec<usize> {data75,1771
    pub fn swap(&mut self, i: usize, j: usize) {swap79,1834
    pub fn inverse(&self) -> Self {inverse83,1921
    pub fn is_permutation(&self) -> bool {is_permutation91,2098

matrix/rowvec.rs,5181
type Result<T> = std::result::Result<T, Box<dyn Error>>;Result13,324
pub struct RowVec<'a, F: Eq + Field>(Mat<'a, F>);RowVec16,407
impl<'a, F: Eq + Field> Clone for RowVec<'a, F> {RowVec18,458
    fn clone(&self) -> Self {clone19,508
impl<'a, F: Eq + Field> Add for RowVec<'a, F> {RowVec24,578
    fn add(self, other: Self) -> Self::Output {add27,651
impl<'a, F: Eq + Field> Add<&RowVec<'a, F>> for RowVec<'a, F> {Add32,731
    fn add(self, other: &Self) -> Self::Output {add35,820
impl<'a, F: Eq + Field> Add<RowVec<'a, F>> for &RowVec<'a, F> {Add40,900
    fn add(self, other: RowVec<'a, F>) -> Self::Output {add43,998
impl<'a, F: Eq + Field> Add for &RowVec<'a, F> {Add48,1086
    fn add(self, other: Self) -> Self::Output {add51,1169
impl<'a, F: Eq + Field> AddAssign<RowVec<'a, F>> for RowVec<'a, F> {AddAssign56,1261
    fn add_assign(&mut self, other: Self) {add_assign57,1330
impl<'a, F: Eq + Field> AddAssign<&RowVec<'a, F>> for RowVec<'a, F> {AddAssign62,1408
    fn add_assign(&mut self, other: &Self) {add_assign63,1478
impl<'a, F: Eq + Field> Sub for RowVec<'a, F> {RowVec68,1560
    fn sub(self, other: Self) -> Self::Output {sub71,1633
impl<'a, F: Eq + Field> Sub<&RowVec<'a, F>> for RowVec<'a, F> {Sub76,1713
    fn sub(self, other: &Self) -> Self::Output {sub79,1802
impl<'a, F: Eq + Field> Sub<RowVec<'a, F>> for &RowVec<'a, F> {Sub84,1882
    fn sub(self, other: RowVec<'a, F>) -> Self::Output {sub87,1980
impl<'a, F: Eq + Field> Sub for &RowVec<'a, F> {Sub92,2068
    fn sub(self, other: Self) -> Self::Output {sub95,2151
impl<'a, F: Eq + Field> SubAssign<RowVec<'a, F>> for RowVec<'a, F> {SubAssign100,2243
    fn sub_assign(&mut self, other: Self) {sub_assign101,2312
impl<'a, F: Eq + Field> SubAssign<&RowVec<'a, F>> for RowVec<'a, F> {SubAssign106,2390
    fn sub_assign(&mut self, other: &Self) {sub_assign107,2460
impl<'a, F: Eq + Field> Mul<Mat<'a, F>> for RowVec<'a, F> {Mul112,2542
    fn mul(self, other: Mat<'a, F>) -> Self::Output {mul115,2627
impl<'a, F: Eq + Field> Mul<&Mat<'a, F>> for RowVec<'a, F> {Mul120,2713
    fn mul(self, other: &Mat<'a, F>) -> Self::Output {mul123,2799
impl<'a, F: Eq + Field> Mul<Mat<'a, F>> for &RowVec<'a, F> {Mul128,2885
    fn mul(self, other: Mat<'a, F>) -> Self::Output {mul131,2980
impl<'a, F: Eq + Field> Mul<&Mat<'a, F>> for &RowVec<'a, F> {Mul136,3065
    fn mul(self, other: &Mat<'a, F>) -> Self::Output {mul139,3161
impl<'a, F: Eq + Field> MulAssign<Mat<'a, F>> for RowVec<'a, F> {MulAssign144,3257
    fn mul_assign(&mut self, other: Mat<'a, F>) {mul_assign145,3323
impl<'a, F: Eq + Field> MulAssign<&Mat<'a, F>> for RowVec<'a, F> {MulAssign150,3407
    fn mul_assign(&mut self, other: &Mat<'a, F>) {mul_assign151,3474
impl<'a, F: Eq + Field> Mul<Perm> for RowVec<'a, F> {RowVec156,3559
    fn mul(self, other: Perm) -> Self::Output {mul159,3638
impl<'a, F: Eq + Field> Mul<&Perm> for RowVec<'a, F> {RowVec164,3718
    fn mul(self, other: &Perm) -> Self::Output {mul167,3798
impl<'a, F: Eq + Field> Mul<Perm> for &RowVec<'a, F> {Mul172,3878
    fn mul(self, other: Perm) -> Self::Output {mul175,3967
impl<'a, F: Eq + Field> Mul<&Perm> for &RowVec<'a, F> {Mul180,4046
    fn mul(self, other: &Perm) -> Self::Output {mul183,4136
impl<'a, F: Eq + Field> Neg for RowVec<'a, F> {RowVec188,4234
    fn neg(self) -> Self::Output {neg191,4307
impl<'a, F: Eq + Field> Neg for &RowVec<'a, F> {Neg196,4366
    fn neg(self) -> Self::Output {neg199,4449
impl<'a, F: Eq + Field> Index<usize> for RowVec<'a, F> {RowVec204,4518
    fn index(&self, index: usize) -> &Self::Output {index207,4603
impl<'a, F: Eq + Field> IndexMut<usize> for RowVec<'a, F> {RowVec212,4693
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {index_mut213,4753
impl<'a, F: Eq + F2FiniteExtension> Debug for RowVec<'a, F> {RowVec218,4859
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {fmt219,4921
impl<'a, F: Eq + FiniteField> Display for RowVec<'a, F> {RowVec224,5022
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {fmt225,5080
impl<'a, F: Eq + Field> RowVec<'a, F> {RowVec230,5179
    pub fn new(field: &'a F, data: Vec<F::FElt>) -> Self {new231,5219
    pub fn zero(field: &'a F, cols: usize) -> Self {zero238,5417
    pub fn field(&self) -> &'a F {field242,5519
    pub fn rows(&self) -> usize {rows246,5584
    pub fn cols(&self) -> usize {cols250,5635
    pub fn data(&self) -> &Vec<F::FElt> {data254,5698
    pub fn weight(&self) -> usize {weight258,5769
    pub fn random(rng: &mut ThreadRng, f: &'a F, n: usize) -> Self {random268,5990
    pub fn random_with_weight(rng: &mut ThreadRng, f: &'a F, n: usize, w: usize) -> Self {random_with_weight272,6108
    pub fn transpose(&self) -> Mat<'a, F> {transpose291,6673
    pub fn is_zero(&self) -> bool {is_zero295,6751
    pub fn extract_cols(&self, perm: &Vec<usize>) -> Self {extract_cols304,6943
impl<'a> RowVec<'a, F2> {RowVec309,7054
    pub fn write(&self, file_name: &str) -> Result<()> {write310,7080
    pub fn read_vector(file_name: &str, f2: &'a F2) -> Result<RowVec<'a, F2>> {read_vector333,7789

matrix/f2.rs,1470
type Result<T> = std::result::Result<T, Box<dyn Error>>;Result7,128
impl<'a> Mat<'a, F2> {Mat10,224
    // pub fn add_rows(&mut self, row1: usize, row2: usize) {add_rows11,247
    // pub fn inverse_f2(&self) -> Option<Self> {inverse_f220,588
    // pub fn invertible_random_f2(rng: &mut ThreadRng, f2: &'a F2, n: usize) -> Self {invertible_random_f290,3002
    // pub fn standard_parity_check_equivalent_f2(&self) -> (Self, Perm) {standard_parity_check_equivalent_f2123,4242
    // pub fn row_echelon_form_f2(&mut self) -> usize {row_echelon_form_f2184,6459
    // pub fn reduced_row_echelon_form_f2(&mut self) -> usize {reduced_row_echelon_form_f2222,7652
    // pub fn rank_f2(&self) -> usize {rank_f2252,8676
    // pub fn standard_form_f2(&self) -> Option<(Self, Self, Perm)> {standard_form_f2259,8934
    // pub fn max_set_of_independant_rows_f2(&mut self) -> Vec<usize> {max_set_of_independant_rows_f2320,11160
    // pub fn remove_redundant_rows_f2(&mut self) {remove_redundant_rows_f2360,12470
    pub fn to_hex_string(&self) -> String {to_hex_string366,12699
    pub fn from_hex_string(s: &str, f2: &'a F2) -> Result<Self> {from_hex_string390,13495
// impl<'a, F: CharacteristicTwo + Eq> Mat<'a, F> {Mat413,14192
//     pub fn from<'b>(f: &'a F, mat_f2: &Mat<'b, F2>) -> Self {from414,14244
impl<'a, F: Eq + F2FiniteExtension> Mat<'a, F> {Mat425,14605
    pub fn binary<'b>(&self, f2: &'b F2) -> Mat<'b, F2> {binary429,14828

matrix/mod.rs,1114
pub struct Mat<'a, F: Eq + Field> {Mat12,217
impl<'a, F: Eq + Field> Mat<'a, F> {Mat19,332
    pub fn new(field: &'a F, rows: usize, cols: usize, data: Vec<F::FElt>) -> Self {new27,598
    pub fn zero(field: &'a F, rows: usize, cols: usize) -> Self {zero46,1167
    pub fn field(&self) -> &'a F {field58,1453
    pub fn rows(&self) -> usize {rows62,1514
    pub fn cols(&self) -> usize {cols66,1573
    pub fn data(&self) -> &Vec<F::FElt> {data70,1632
    pub fn random(rng: &mut ThreadRng, f: &'a F, n: usize, m: usize) -> Self {random74,1700
    pub fn is_zero(&self) -> bool {is_zero84,1970
    pub fn extract_cols(&self, cols: &Vec<usize>) -> Self {extract_cols96,2302
    pub fn identity(f: &'a F, n: usize) -> Self {identity106,2597
    pub fn transpose(&self) -> Self {transpose114,2775
    pub fn keep_rows(&mut self, rows: &Vec<usize>) {keep_rows129,3175
    pub fn remove_rows(&mut self, rows: &Vec<usize>) {remove_rows152,3955
pub mod f2;f2165,4343
pub mod gauss;gauss166,4355
pub mod perm;perm167,4370
pub mod rowvec;rowvec168,4384
pub mod traits;traits169,4400

crypto.rs,1306
type Result<T> = std::result::Result<T, Box<dyn Error>>;Result15,244
pub struct PublicKey<'a> {PublicKey24,643
pub struct SecretKey<'a, 'b> {SecretKey44,1414
pub fn keygen<'a, 'b>(keygen51,1534
impl<'a> PublicKey<'a> {PublicKey87,2492
    pub fn sgp(&self) -> &Mat<'a, F2> {sgp88,2517
    pub fn t(&self) -> u32 {t92,2582
    pub fn encrypt(&self, m: &RowVec<'a, F2>) -> RowVec<'a, F2> {encrypt96,2637
    pub fn write(&self, file_name: &str) -> Result<()> {write107,3016
    pub fn read_public_key(file_name: &str, f2: &'a F2) -> Result<Self> {read_public_key114,3260
    pub fn read_code_dimension(file_name: &str) -> Result<u32> {read_code_dimension128,3780
impl<'a, 'b> SecretKey<'a, 'b> {SecretKey139,4113
    pub fn s(&self) -> &Mat<'a, F2> {s140,4146
    pub fn goppa(&self) -> &Goppa<'b, F2m> {goppa144,4207
    pub fn info_set(&self) -> &Vec<usize> {info_set148,4279
    pub fn p(&self) -> &Perm {p152,4353
    pub fn decrypt(&self, c: &RowVec<'a, F2>) -> RowVec<'a, F2> {decrypt156,4407
    pub fn write(&self, file_name: &str) -> Result<()> {write171,4867
    pub fn read_finite_field(file_name: &str) -> Result<F2m> {read_finite_field189,5579
    pub fn read_secret_key(file_name: &str, f2: &'a F2, f2m: &'b F2m) -> Result<Self> {read_secret_key200,5984
