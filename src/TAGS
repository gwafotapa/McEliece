
polynomial/traits.rs,2788
impl<F> PartialEq for Poly<F>Poly11,259
    fn eq(&self, other: &Self) -> bool {eq15,316
impl<F> Clone for Poly<F>Poly28,620
    fn clone(&self) -> Self {clone32,673
impl<F> Add for Poly<F>Poly42,920
    fn add(self, other: Self) -> Self::Output {add48,996
impl<F> Add<&Poly<F>> for Poly<F>Add53,1076
    fn add(self, other: &Self) -> Self::Output {add59,1162
impl<F> Add<Poly<F>> for &Poly<F>Add64,1242
    fn add(self, other: Poly<F>) -> Self::Output {add70,1331
impl<F> Add for &Poly<F>Add75,1413
    fn add(self, other: Self) -> Self::Output {add81,1493
impl<F> AddAssign<Poly<F>> for Poly<F>AddAssign88,1620
    fn add_assign(&mut self, other: Self) {add_assign92,1686
impl<F> AddAssign<&Poly<F>> for Poly<F>AddAssign97,1764
    fn add_assign(&mut self, other: &Self) {add_assign101,1831
impl<F> Sub for Poly<F>Poly115,2147
    fn sub(self, other: Self) -> Self::Output {sub121,2223
impl<F> Sub<&Poly<F>> for Poly<F>Sub126,2303
    fn sub(self, other: &Self) -> Self::Output {sub132,2389
impl<F> Sub<Poly<F>> for &Poly<F>Sub137,2469
    fn sub(self, other: Poly<F>) -> Self::Output {sub143,2558
impl<F> Sub for &Poly<F>Sub148,2640
    fn sub(self, other: Self) -> Self::Output {sub154,2720
impl<F> SubAssign<Poly<F>> for Poly<F>SubAssign161,2850
    fn sub_assign(&mut self, other: Self) {sub_assign165,2916
impl<F> SubAssign<&Poly<F>> for Poly<F>SubAssign170,2994
    fn sub_assign(&mut self, other: &Self) {sub_assign174,3061
impl<F> Mul for Poly<F>Poly188,3377
    fn mul(self, other: Self) -> Self::Output {mul194,3453
impl<F> Mul<&Poly<F>> for Poly<F>Mul199,3533
    fn mul(self, other: &Self) -> Self::Output {mul205,3619
impl<F> Mul<Poly<F>> for &Poly<F>Mul210,3699
    fn mul(self, other: Poly<F>) -> Self::Output {mul216,3788
impl<F> Mul for &Poly<F>Mul221,3870
    fn mul(self, other: Self) -> Self::Output {mul227,3950
impl<F> MulAssign<Poly<F>> for Poly<F>MulAssign242,4351
    fn mul_assign(&mut self, other: Self) {mul_assign246,4417
impl<F> MulAssign<&Poly<F>> for Poly<F>MulAssign251,4495
    fn mul_assign(&mut self, other: &Self) {mul_assign255,4562
impl<F> Neg for Poly<F>Poly272,5034
    fn neg(self) -> Self::Output {neg278,5110
impl<F> Neg for &Poly<F>Neg283,5169
    fn neg(self) -> Self::Output {neg289,5249
impl<F> Index<usize> for Poly<F>Poly300,5492
    fn index(&self, index: usize) -> &Self::Output {index306,5588
impl<F> IndexMut<usize> for Poly<F>Poly311,5676
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {index_mut315,5739
impl<F> Debug for Poly<F>Poly320,5843
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {fmt324,5903
impl<F> Display for Poly<F>Poly350,6612
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {fmt354,6668

polynomial/characteristic_two.rs,877
type Result<T> = std::result::Result<T, Box<dyn Error>>;Result8,176
impl<F> Poly<F>Poly10,234
    pub fn random_monic_irreducible(field: Field<F>, degree: usize) -> Selfrandom_monic_irreducible14,297
    pub fn square(&mut self) {square32,800
    pub fn square_root_modulo(&mut self, modulus: &Self)square_root_modulo43,1133
    pub fn inverse_modulo_by_fast_exponentiation(&mut self, modulus: &Self)inverse_modulo_by_fast_exponentiation58,1548
    pub fn pow_modulo(&mut self, mut n: u32, modulus: &Self) {pow_modulo81,2236
    pub fn is_irreducible(&self) -> boolis_irreducible104,2863
    pub(crate) fn goppa_extended_gcd(g: &Self, t: &Self) -> (Self, Self) {goppa_extended_gcd142,3921
impl Poly<F2m> {Poly170,4691
    pub fn to_bytes(&self) -> Vec<u8> {to_bytes175,4898
    pub fn from_bytes(vec: &[u8]) -> Result<(usize, Self)> {from_bytes187,5346

polynomial/mod.rs,1253
pub struct Poly<F>Poly9,153
impl<F> Poly<F>Poly17,252
    pub fn new(field: Field<F>, data: Vec<F::FieldElement>) -> Self {new26,437
    pub fn zero(field: Field<F>, len: usize) -> Self {zero44,985
    pub fn x_n(field: Field<F>, n: usize) -> Self {x_n57,1420
    pub fn support(field: Field<F>, support: &[usize]) -> Self {support73,1918
    pub fn field(&self) -> &Rc<F> {field92,2507
    pub fn degree(&self) -> usize {degree96,2570
    pub fn is_zero(&self) -> bool {is_zero104,2774
    fn update_len(&mut self) {update_len109,2952
    pub fn random(field: Field<F>, degree: usize) -> Self {random114,3100
    pub fn eval(&self, point: F::FieldElement) -> F::FieldElement {eval127,3512
    pub fn euclidean_division(a: &Self, b: &Self) -> (Self, Self) {euclidean_division141,3951
    pub fn modulo(&mut self, modulus: &Self) {modulo171,4958
    pub fn gcd(a: &Self, b: &Self) -> Self {gcd187,5532
    pub fn neg_mut(&mut self) {neg_mut199,5842
    pub fn extended_gcd(a: &Self, b: &Self) -> (Self, Self, Self, Self, Self) {extended_gcd209,6129
    pub fn inverse_modulo(&self, modulus: &Self) -> Self {inverse_modulo252,7380
pub mod characteristic_two;characteristic_two266,7777
pub mod traits;traits267,7805

goppa.rs,2323
type Result<T> = result::Result<T, Box<dyn Error>>;Result19,315
pub struct Goppa<F>Goppa23,427
impl<F> Debug for Goppa<F>Goppa31,527
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {fmt35,588
impl<F> Display for Goppa<F>Goppa58,1259
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {fmt62,1322
impl<F> Goppa<F>Goppa85,1987
    pub fn new(poly: Poly<F>, set: Vec<F::FieldElement>) -> Self {new103,2605
    pub fn random(field: Field<F>, n: usize, t: usize) -> Self {random131,3747
    pub fn len(&self) -> usize {len167,4928
    pub fn poly(&self) -> &Poly<F> {poly171,4991
    pub fn set(&self) -> &Vec<F::FieldElement> {set175,5054
    pub fn field(&self) -> &Rc<F> {field179,5128
    pub fn parity_check_x(&self) -> Mat<F> {parity_check_x183,5197
    pub fn parity_check_y(&self) -> Mat<F> {parity_check_y195,5508
    pub fn parity_check_z(&self) -> Mat<F> {parity_check_z213,5955
    pub fn parity_check_xyz(&self) -> Mat<F> {parity_check_xyz224,6232
    pub fn parity_check_from_xyz(xyz: &Mat<F>, f2: Field<F2>) -> Mat<F2> {parity_check_from_xyz231,6421
    pub fn parity_check_matrix(&self, f2: Field<F2>) -> Mat<F2> {parity_check_matrix237,6584
    pub fn generator_from_xyz(xyz: &Mat<F>, f2: Field<F2>) -> (Mat<F2>, Vec<usize>) {generator_from_xyz242,6746
    pub fn generator_from_parity_check_standard(h: &Mat<F2>) -> Mat<F2> {generator_from_parity_check_standard251,7141
    pub fn generator_from_parity_check(h: &Mat<F2>) -> (Mat<F2>, Vec<usize>) {generator_from_parity_check265,7531
    pub fn generator_matrix(&self, f2: Field<F2>) -> Mat<F2> {generator_matrix274,7904
    pub fn syndrome(&self, r: &RowVec<F2>) -> Mat<F> {syndrome279,8062
    pub fn syndrome_from_xyz(xyz: &Mat<F>, rcv: &RowVec<F2>) -> Mat<F> {syndrome_from_xyz284,8208
    pub fn encode(&self, msg: &RowVec<F2>) -> RowVec<F2> {encode298,8634
    pub fn g_encode(g: &Mat<F2>, msg: &RowVec<F2>) -> RowVec<F2> {g_encode304,8818
    pub fn decode(&self, rcv: &RowVec<F2>) -> RowVec<F2> {decode308,8908
    pub fn xyz_decode(&self, xyz: &Mat<F>, rcv: &RowVec<F2>) -> RowVec<F2> {xyz_decode313,9052
impl Goppa<F2m> {Goppa369,10569
    pub fn to_bytes(&self) -> Vec<u8> {to_bytes380,11039
    pub fn from_bytes(vec: &[u8]) -> Result<(usize, Self)> {from_bytes406,11738

main.rs,1574
// const GOPPA_N_MIN: usize = 3;GOPPA_N_MIN15,315
// const GOPPA_N_MAX: usize = 1024;GOPPA_N_MAX16,348
// const GOPPA_N: usize = 1024; // Code lengthGOPPA_N17,384
// const GOPPA_T: usize = 50; // Code correction capacityGOPPA_T18,431
//                            // const GOPPA_K: usize = 524; // Code dimensionGOPPA_K19,489
// const GOPPA_N_MIN: usize = 3;GOPPA_N_MIN21,569
// const GOPPA_N_MAX: usize = 2048;GOPPA_N_MAX22,602
// const GOPPA_N: usize = 2048; // Code lengthGOPPA_N23,638
// const GOPPA_T: usize = 70; // Code correction capacityGOPPA_T24,685
//                            // const GOPPA_K: usize = 1278; // Code dimensionGOPPA_K25,743
const GOPPA_N_MIN: usize = 3;GOPPA_N_MIN27,824
const GOPPA_N_MAX: usize = 4096;GOPPA_N_MAX28,854
const GOPPA_N: usize = 4096; // Code lengthGOPPA_N29,887
const GOPPA_T: usize = 170; // Code correction capacityGOPPA_T30,931
                            // const GOPPA_K: usize = 2056; // Code dimensionGOPPA_K31,987
const PLAINTEXT: &str = "plaintext.mce";PLAINTEXT33,1066
const CIPHERTEXT: &str = "ciphertext.mce";CIPHERTEXT34,1107
const DECRYPTED: &str = "decrypted.mce";DECRYPTED35,1150
const PUBLIC_KEY: &str = "public_key.mce";PUBLIC_KEY36,1191
const SECRET_KEY: &str = "secret_key.mce";SECRET_KEY37,1234
fn get_program(path: &str) -> &str {get_program39,1278
fn get_code_params(matches: &Matches) -> Result<(usize, usize), MainError> {get_code_params47,1429
fn print_help(program: &str, opts: Options) {print_help75,2303
fn main() -> Result<(), MainError> {main87,2694

finite_field/f7.rs,1632
const ORDER: usize = 7;ORDER8,128
const EXP: [F7Element; ORDER] = [1, 3, 2, 6, 4, 5, 1];EXP10,153
const LOG: [u32; ORDER] = [ORDER as u32, 0, 2, 1, 4, 5, 3];LOG12,209
pub struct F7 {}F719,350
impl PartialEq for F7 {F721,368
    fn eq(&self, _other: &Self) -> bool {eq22,392
impl FieldTrait for F7 {F727,456
    fn generate(_params: Self::FieldParameters) -> Self {generate35,635
    fn zero(&self) -> Self::FieldElement {zero45,903
    fn one(&self) -> Self::FieldElement {one55,1157
    fn characteristic(&self) -> usize {characteristic65,1401
    fn add(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement {add78,1746
    fn sub(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement {sub91,2164
    fn mul(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement {mul96,2313
    fn neg(&self, a: Self::FieldElement) -> Self::FieldElement {neg122,3008
    fn inv(&self, a: Self::FieldElement) -> Option<Self::FieldElement> {inv127,3130
    fn random_element(&self, rng: &mut ThreadRng) -> Self::FieldElement {random_element136,3362
impl FiniteField for F7 {F7141,3484
    fn characteristic_exponent(&self) -> u32 {characteristic_exponent148,3734
    fn exp(&self, n: u32) -> Self::FieldElement {exp152,3798
    fn log(&self, a: Self::FieldElement) -> Option<u32> {log156,3879
mod test {test166,4057
    fn f7_add() {f7_add170,4099
    fn f7_characteristic() {f7_characteristic184,4509
    fn f7_sub() {f7_sub198,4814
    fn f7_mul() {f7_mul209,5060
    fn f7_neg() {f7_neg227,5683
    fn f7_inv() {f7_inv240,6027

finite_field/f2m.rs,1977
pub struct F2m {F2m9,205
impl PartialEq for F2m {F2m16,324
    fn eq(&self, other: &Self) -> bool {eq17,349
impl FieldTrait for F2m {F2m22,433
    fn generate(order: Self::FieldParameters) -> Self {generate44,1051
    fn zero(&self) -> Self::FieldElement {zero75,1886
    fn one(&self) -> Self::FieldElement {one85,2154
    fn characteristic(&self) -> usize {characteristic95,2413
    fn add(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement {add99,2470
    fn sub(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement {sub103,2579
    fn mul(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement {mul117,3064
    fn neg(&self, a: Self::FieldElement) -> Self::FieldElement {neg141,3757
    fn inv(&self, a: Self::FieldElement) -> Option<Self::FieldElement> {inv145,3839
    fn random_element(&self, rng: &mut ThreadRng) -> Self::FieldElement {random_element154,4086
impl FiniteField for F2m {F2m159,4213
    fn characteristic_exponent(&self) -> u32 {characteristic_exponent166,4494
    fn exp(&self, n: u32) -> Self::FieldElement {exp170,4563
    fn log(&self, a: Self::FieldElement) -> Option<u32> {log174,4649
impl CharacteristicTwo for F2m {}F2m183,4819
impl F2FiniteExtension for F2m {F2m185,4854
    fn elt_to_u32(&self, a: Self::FieldElement) -> u32 {elt_to_u32186,4887
    fn u32_to_elt(&self, n: u32) -> Self::FieldElement {u32_to_elt190,4961
pub fn primitive_poly(order: usize) -> u32 {primitive_poly209,5563
pub fn prime_power(q: u32) -> std::result::Result<(u32, u32), &'static str> {prime_power241,6462
pub fn trial_division(mut n: u32) -> Vec<u32> {trial_division261,7168
mod test {test287,7676
    fn f256_add() {f256_add291,7718
    fn f256_characteristic() {f256_characteristic305,8142
    fn f256_sub() {f256_sub315,8377
    fn f256_mul() {f256_mul325,8629
    fn f256_neg() {f256_neg343,9266
    fn f256_inv() {f256_inv356,9624

finite_field/f2.rs,1443
pub struct F2 {}F29,198
impl FieldTrait for F2 {F211,216
    fn generate(_params: Self::FieldParameters) -> Self {generate19,379
    fn zero(&self) -> Self::FieldElement {zero29,647
    fn one(&self) -> Self::FieldElement {one39,901
    fn characteristic(&self) -> usize {characteristic49,1145
    fn add(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement {add62,1486
    fn sub(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement {sub75,1885
    fn mul(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement {mul88,2293
    fn neg(&self, a: Self::FieldElement) -> Self::FieldElement {neg99,2621
    fn inv(&self, a: Self::FieldElement) -> Option<Self::FieldElement> {inv110,2937
    fn random_element(&self, rng: &mut ThreadRng) -> Self::FieldElement {random_element119,3147
impl FiniteField for F2 {F2124,3258
    fn characteristic_exponent(&self) -> u32 {characteristic_exponent131,3508
    fn exp(&self, _n: u32) -> Self::FieldElement {exp142,3798
    fn log(&self, a: Self::FieldElement) -> Option<u32> {log153,4116
    fn elt_to_str(&self, a: Self::FieldElement) -> String {elt_to_str162,4308
impl CharacteristicTwo for F2 {}F2167,4399
impl F2FiniteExtension for F2 {F2169,4433
    fn elt_to_u32(&self, a: Self::FieldElement) -> u32 {elt_to_u32171,4500
    fn u32_to_elt(&self, n: u32) -> Self::FieldElement {u32_to_elt180,4742

finite_field/mod.rs,1497
    type FieldParameters;FieldParameters16,320
    fn generate(params: Self::FieldParameters) -> Self;generate19,371
    fn zero(&self) -> Self::FieldElement;zero22,479
    fn one(&self) -> Self::FieldElement;one25,579
    fn characteristic(&self) -> usize;characteristic28,658
    fn add(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement;add31,730
    fn sub(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement;sub34,856
    fn mul(&self, a: Self::FieldElement, b: Self::FieldElement) -> Self::FieldElement;mul37,982
    fn neg(&self, a: Self::FieldElement) -> Self::FieldElement;neg40,1117
    fn inv(&self, a: Self::FieldElement) -> Option<Self::FieldElement>;inv43,1235
    fn random_element(&self, rng: &mut ThreadRng) -> Self::FieldElement;random_element46,1354
    fn characteristic_exponent(&self) -> u32;characteristic_exponent51,1532
    fn order(&self) -> usize {order54,1607
    fn exp(&self, n: u32) -> Self::FieldElement;exp59,1764
    fn log(&self, a: Self::FieldElement) -> Option<u32>;log62,1882
    fn elt_to_str(&self, a: Self::FieldElement) -> String {elt_to_str65,2011
    fn elt_to_u32(&self, a: Self::FieldElement) -> u32;elt_to_u3285,2646
    fn u32_to_elt(&self, n: u32) -> Self::FieldElement;u32_to_elt95,2995
    fn to_vec(&self) -> Vec<Self::FieldElement> {to_vec103,3311
pub enum Field<'a, F>Field113,3540
pub mod f2;f2121,3649
pub mod f2m;f2m122,3661
pub mod f7;f7123,3674

lib.rs,214
pub mod crypto;crypto1,0
pub mod finite_field;finite_field2,16
pub mod goppa;goppa3,38
pub mod matrix;matrix4,53
pub mod polynomial;polynomial5,69
fn div_ceil(a: usize, b: usize) -> usize {div_ceil7,90

matrix/gauss.rs,1268
impl<F> Mat<F>Mat7,104
    pub fn swap_rows(&mut self, row1: usize, row2: usize) {swap_rows11,146
    pub fn swap_cols(&mut self, col1: usize, col2: usize) {swap_cols24,653
    pub fn combine_rows(&mut self, row1: usize, lambda: F::FieldElement, row2: usize) {combine_rows36,999
    pub fn mul_row(&mut self, row: usize, lambda: F::FieldElement) {mul_row44,1274
    pub fn inverse(&self) -> Option<Self> {inverse53,1588
    pub fn invertible_random(field: Field<F>, n: usize) -> Self {invertible_random139,4460
    pub fn row_echelon_form(&mut self) -> Vec<usize> {row_echelon_form193,6263
    pub fn reduced_row_echelon_form(&mut self) -> Vec<usize> {reduced_row_echelon_form243,7860
    pub fn rank(&self) -> usize {rank276,8963
    pub fn max_set_of_independant_rows(&mut self) -> Vec<usize> {max_set_of_independant_rows281,9077
    pub fn is_invertible(&self) -> bool {is_invertible285,9182
    pub fn standard_form(&self) -> Option<(Self, Self, Perm)> {standard_form291,9418
    pub fn standard_parity_check_equivalent(&self) -> (Self, Perm) {standard_parity_check_equivalent366,12182
    pub fn is_standard_form(&self) -> bool {is_standard_form434,14585
    pub fn remove_redundant_rows(&mut self) {remove_redundant_rows457,15167

matrix/traits.rs,3103
impl<F> Clone for Mat<F>Mat10,255
    fn clone(&self) -> Self {clone14,307
impl<F> Add for Mat<F>Mat24,508
    fn add(self, other: Self) -> Self::Output {add30,583
impl<F> Add<&Mat<F>> for Mat<F>Add35,663
    fn add(self, other: &Self) -> Self::Output {add41,747
impl<F> Add<Mat<F>> for &Mat<F>Add46,827
    fn add(self, other: Mat<F>) -> Self::Output {add52,913
impl<F> Add for &Mat<F>Add57,994
    fn add(self, other: Self) -> Self::Output {add63,1072
impl<F> AddAssign<Mat<F>> for Mat<F>AddAssign79,1609
    fn add_assign(&mut self, other: Self) {add_assign83,1673
impl<F> AddAssign<&Mat<F>> for Mat<F>AddAssign88,1751
    fn add_assign(&mut self, other: &Self) {add_assign92,1816
impl<F> Sub for Mat<F>Mat105,2247
    fn sub(self, other: Self) -> Self::Output {sub111,2322
impl<F> Sub<&Mat<F>> for Mat<F>Sub116,2402
    fn sub(self, other: &Self) -> Self::Output {sub122,2486
impl<F> Sub<Mat<F>> for &Mat<F>Sub127,2566
    fn sub(self, other: Mat<F>) -> Self::Output {sub133,2652
impl<F> Sub for &Mat<F>Sub138,2733
    fn sub(self, other: Self) -> Self::Output {sub144,2811
impl<F> SubAssign<Mat<F>> for Mat<F>SubAssign160,3363
    fn sub_assign(&mut self, other: Self) {sub_assign164,3427
impl<F> SubAssign<&Mat<F>> for Mat<F>SubAssign169,3505
    fn sub_assign(&mut self, other: &Self) {sub_assign173,3570
impl<F> Mul for Mat<F>Mat186,4013
    fn mul(self, other: Self) -> Self::Output {mul192,4088
impl<F> Mul<&Mat<F>> for Mat<F>Mul197,4168
    fn mul(self, other: &Self) -> Self::Output {mul203,4252
impl<F> Mul<Mat<F>> for &Mat<F>Mul208,4332
    fn mul(self, other: Mat<F>) -> Self::Output {mul214,4418
impl<F> Mul for &Mat<F>Mul219,4499
    fn mul(self, other: Self) -> Self::Output {mul225,4577
impl<F> MulAssign<Mat<F>> for Mat<F>MulAssign245,5226
    fn mul_assign(&mut self, other: Self) {mul_assign249,5290
impl<F> MulAssign<&Mat<F>> for Mat<F>MulAssign254,5368
    fn mul_assign(&mut self, other: &Self) {mul_assign258,5433
impl<F> Mul<Perm> for Mat<F>Mat278,6090
    fn mul(self, other: Perm) -> Self::Output {mul284,6171
impl<F> Mul<&Perm> for Mat<F>Mat289,6251
    fn mul(self, other: &Perm) -> Self::Output {mul295,6333
impl<F> Mul<Perm> for &Mat<F>Mul300,6413
    fn mul(self, other: Perm) -> Self::Output {mul306,6497
impl<F> Mul<&Perm> for &Mat<F>Mul311,6576
    fn mul(self, perm: &Perm) -> Self::Output {mul317,6661
impl<F> Neg for Mat<F>Mat325,6878
    fn neg(self) -> Self::Output {neg331,6953
impl<F> Neg for &Mat<F>Neg336,7012
    fn neg(self) -> Self::Output {neg342,7090
impl<F> Index<(usize, usize)> for Mat<F>Mat352,7338
    fn index(&self, index: (usize, usize)) -> &Self::Output {index358,7442
impl<F> IndexMut<(usize, usize)> for Mat<F>Mat363,7563
    fn index_mut(&mut self, index: (usize, usize)) -> &mut Self::Output {index_mut367,7634
impl<F> Debug for Mat<F>Mat372,7771
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {fmt376,7830
impl<F> Display for Mat<F>Mat396,8406
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {fmt400,8461

matrix/perm.rs,736
pub struct Perm(Vec<usize>);Perm5,81
impl Index<usize> for Perm {Perm7,111
    fn index(&self, index: usize) -> &Self::Output {index10,166
impl IndexMut<usize> for Perm {Perm15,251
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {index_mut16,283
impl Perm {Perm21,384
    pub fn new(vec: Vec<usize>) -> Self {new32,713
    pub fn random(n: usize) -> Self {random48,1134
    pub fn identity(n: usize) -> Self {identity64,1539
    pub fn len(&self) -> usize {len72,1708
    pub fn data(&self) -> &Vec<usize> {data76,1769
    pub fn swap(&mut self, i: usize, j: usize) {swap80,1832
    pub fn inverse(&self) -> Self {inverse84,1915
    pub fn is_permutation(&self) -> bool {is_permutation92,2092

matrix/rowvec.rs,4368
type Result<T> = std::result::Result<T, Box<dyn Error>>;Result15,351
pub struct RowVec<F>(Mat<F>)RowVec18,434
impl<F> Clone for RowVec<F>RowVec22,489
    fn clone(&self) -> Self {clone26,544
impl<F> Add for RowVec<F>RowVec31,614
    fn add(self, other: Self) -> Self::Output {add37,692
impl<F> Add<&RowVec<F>> for RowVec<F>Add42,772
    fn add(self, other: &Self) -> Self::Output {add48,862
impl<F> Add<RowVec<F>> for &RowVec<F>Add53,942
    fn add(self, other: RowVec<F>) -> Self::Output {add59,1037
impl<F> Add for &RowVec<F>Add64,1121
    fn add(self, other: Self) -> Self::Output {add70,1205
impl<F> AddAssign<RowVec<F>> for RowVec<F>AddAssign75,1297
    fn add_assign(&mut self, other: Self) {add_assign79,1367
impl<F> AddAssign<&RowVec<F>> for RowVec<F>AddAssign84,1445
    fn add_assign(&mut self, other: &Self) {add_assign88,1516
impl<F> Sub for RowVec<F>RowVec93,1598
    fn sub(self, other: Self) -> Self::Output {sub99,1676
impl<F> Sub<&RowVec<F>> for RowVec<F>Sub104,1756
    fn sub(self, other: &Self) -> Self::Output {sub110,1846
impl<F> Sub<RowVec<F>> for &RowVec<F>Sub115,1926
    fn sub(self, other: RowVec<F>) -> Self::Output {sub121,2021
impl<F> Sub for &RowVec<F>Sub126,2105
    fn sub(self, other: Self) -> Self::Output {sub132,2189
impl<F> SubAssign<RowVec<F>> for RowVec<F>SubAssign137,2281
    fn sub_assign(&mut self, other: Self) {sub_assign141,2351
impl<F> SubAssign<&RowVec<F>> for RowVec<F>SubAssign146,2429
    fn sub_assign(&mut self, other: &Self) {sub_assign150,2500
impl<F> Mul<Mat<F>> for RowVec<F>Mul155,2582
    fn mul(self, other: Mat<F>) -> Self::Output {mul161,2668
impl<F> Mul<&Mat<F>> for RowVec<F>Mul166,2750
    fn mul(self, other: &Mat<F>) -> Self::Output {mul172,2837
impl<F> Mul<Mat<F>> for &RowVec<F>Mul177,2919
    fn mul(self, other: Mat<F>) -> Self::Output {mul183,3011
impl<F> Mul<&Mat<F>> for &RowVec<F>Mul188,3092
    fn mul(self, other: &Mat<F>) -> Self::Output {mul194,3185
impl<F> MulAssign<Mat<F>> for RowVec<F>MulAssign199,3277
    fn mul_assign(&mut self, other: Mat<F>) {mul_assign203,3344
impl<F> MulAssign<&Mat<F>> for RowVec<F>MulAssign208,3424
    fn mul_assign(&mut self, other: &Mat<F>) {mul_assign212,3492
impl<F> Mul<Perm> for RowVec<F>RowVec217,3573
    fn mul(self, other: Perm) -> Self::Output {mul223,3657
impl<F> Mul<&Perm> for RowVec<F>RowVec228,3737
    fn mul(self, other: &Perm) -> Self::Output {mul234,3822
impl<F> Mul<Perm> for &RowVec<F>Mul239,3902
    fn mul(self, other: Perm) -> Self::Output {mul245,3992
impl<F> Mul<&Perm> for &RowVec<F>Mul250,4071
    fn mul(self, other: &Perm) -> Self::Output {mul256,4162
impl<F> Neg for RowVec<F>RowVec261,4260
    fn neg(self) -> Self::Output {neg267,4338
impl<F> Neg for &RowVec<F>Neg272,4397
    fn neg(self) -> Self::Output {neg278,4481
impl<F> Index<usize> for RowVec<F>RowVec283,4550
    fn index(&self, index: usize) -> &Self::Output {index289,4648
impl<F> IndexMut<usize> for RowVec<F>RowVec294,4738
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {index_mut298,4803
impl<F> Debug for RowVec<F>RowVec303,4909
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {fmt307,4971
impl<F> Display for RowVec<F>RowVec312,5072
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {fmt316,5130
impl<F> RowVec<F>RowVec321,5229
    pub fn new(field: Field<F>, data: Vec<F::FieldElement>) -> Self {new325,5274
    pub fn zero(field: Field<F>, cols: usize) -> Self {zero329,5404
    pub fn field(&self) -> &Rc<F> {field333,5509
    pub fn rows(&self) -> usize {rows337,5575
    pub fn cols(&self) -> usize {cols341,5626
    pub fn data(&self) -> &Vec<F::FieldElement> {data345,5689
    pub fn weight(&self) -> usize {weight349,5768
    pub fn random(field: Field<F>, n: usize) -> Self {random359,5989
    pub fn random_with_weight(field: Field<F>, n: usize, w: usize) -> Self {random_with_weight363,6092
    pub fn transpose(&self) -> Mat<F> {transpose386,6755
    pub fn is_zero(&self) -> bool {is_zero390,6829
    pub fn extract_cols(&self, perm: &Vec<usize>) -> Self {extract_cols399,7021
impl RowVec<F2> {RowVec404,7132
    pub fn write(&self, file_name: &str) -> Result<()> {write405,7150
    pub fn read_vector(file_name: &str) -> Result<RowVec<F2>> {read_vector429,7864

matrix/f2.rs,329
type Result<T> = std::result::Result<T, Box<dyn Error>>;Result6,118
impl Mat<F2> {Mat8,176
    pub fn to_bytes(&self) -> Vec<u8> {to_bytes13,345
    pub fn from_bytes(vec: &[u8]) -> Result<(usize, Self)> {from_bytes41,1229
impl<F> Mat<F>Mat65,1959
    pub fn binary(&self, field: Field<F2>) -> Mat<F2> {binary72,2182

matrix/mod.rs,1092
pub struct Mat<F>Mat12,202
impl<F> Mat<F>Mat22,334
    pub fn new(field: Field<F>, rows: usize, cols: usize, data: Vec<F::FieldElement>) -> Self {new33,605
    pub fn zero(field: Field<F>, rows: usize, cols: usize) -> Self {zero56,1335
    pub fn field(&self) -> &Rc<F> {field74,1850
    pub fn rows(&self) -> usize {rows78,1913
    pub fn cols(&self) -> usize {cols82,1972
    pub fn data(&self) -> &Vec<F::FieldElement> {data86,2031
    pub fn random(field: Field<F>, n: usize, m: usize) -> Self {random90,2107
    pub fn is_zero(&self) -> bool {is_zero101,2422
    pub fn extract_cols(&self, cols: &Vec<usize>) -> Self {extract_cols113,2754
    pub fn identity(field: Field<F>, n: usize) -> Self {identity123,3062
    pub fn transpose(&self) -> Self {transpose131,3258
    pub fn keep_rows(&mut self, rows: &Vec<usize>) {keep_rows146,3673
    pub fn remove_rows(&mut self, rows: &Vec<usize>) {remove_rows169,4453
pub mod f2;f2182,4841
pub mod gauss;gauss183,4853
pub mod perm;perm184,4868
pub mod rowvec;rowvec185,4882
pub mod traits;traits186,4898

crypto.rs,1157
type Result<T> = std::result::Result<T, Box<dyn Error>>;Result16,273
pub struct PublicKey {PublicKey27,696
pub struct SecretKey {SecretKey47,1461
pub fn keygen(n: usize, t: usize) -> (PublicKey, SecretKey) {keygen54,1565
impl PublicKey {PublicKey89,2512
    pub fn sgp(&self) -> &Mat<F2> {sgp90,2529
    pub fn t(&self) -> usize {t94,2590
    pub fn encrypt(&self, m: &RowVec<F2>) -> RowVec<F2> {encrypt98,2643
    pub fn write(&self, file_name: &str) -> Result<()> {write115,3245
    pub fn read_public_key(file_name: &str) -> Result<Self> {read_public_key122,3468
    pub fn read_code_dimension(file_name: &str) -> Result<usize> {read_code_dimension131,3801
impl SecretKey {SecretKey140,4048
    pub fn s(&self) -> &Mat<F2> {s141,4065
    pub fn goppa(&self) -> &Goppa<F2m> {goppa145,4122
    pub fn info_set(&self) -> &Vec<usize> {info_set149,4190
    pub fn p(&self) -> &Perm {p153,4264
    pub fn decrypt(&self, c: &RowVec<F2>) -> RowVec<F2> {decrypt157,4318
    pub fn write(&self, file_name: &str) -> Result<()> {write189,5570
    pub fn read_secret_key(file_name: &str) -> Result<Self> {read_secret_key207,6180
